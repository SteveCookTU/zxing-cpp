pub(crate) mod base_ffi {
    use autocxx::prelude::*;
    #[allow(non_snake_case)]
    #[allow(dead_code)]
    #[allow(non_upper_case_globals)]
    #[allow(non_camel_case_types)]
    mod ffi {
        pub trait ToCppString {
            fn into_cpp(self) -> cxx::UniquePtr<cxx::CxxString>;
        }
        impl ToCppString for &str {
            fn into_cpp(self) -> cxx::UniquePtr<cxx::CxxString> {
                make_string(self)
            }
        }
        impl ToCppString for String {
            fn into_cpp(self) -> cxx::UniquePtr<cxx::CxxString> {
                make_string(&self)
            }
        }
        impl ToCppString for &String {
            fn into_cpp(self) -> cxx::UniquePtr<cxx::CxxString> {
                make_string(self)
            }
        }
        impl ToCppString for cxx::UniquePtr<cxx::CxxString> {
            fn into_cpp(self) -> cxx::UniquePtr<cxx::CxxString> {
                self
            }
        }
        unsafe impl cxx::ExternType for bindgen::root::ZXing::ImageView {
            type Id = (
                ::cxx::Z,
                ::cxx::X,
                ::cxx::i,
                ::cxx::n,
                ::cxx::g,
                (),
                ::cxx::I,
                ::cxx::m,
                ::cxx::a,
                ::cxx::g,
                ::cxx::e,
                ::cxx::V,
                ::cxx::i,
                ::cxx::e,
                ::cxx::w,
            );
            type Kind = cxx::kind::Opaque;
        }
        unsafe impl cxx::ExternType for bindgen::root::ZXing::Result {
            type Id = (
                ::cxx::Z,
                ::cxx::X,
                ::cxx::i,
                ::cxx::n,
                ::cxx::g,
                (),
                ::cxx::R,
                ::cxx::e,
                ::cxx::s,
                ::cxx::u,
                ::cxx::l,
                ::cxx::t,
            );
            type Kind = cxx::kind::Opaque;
        }
        unsafe impl cxx::ExternType for bindgen::root::ZXing::ImageFormat {
            type Id = (
                ::cxx::Z,
                ::cxx::X,
                ::cxx::i,
                ::cxx::n,
                ::cxx::g,
                (),
                ::cxx::I,
                ::cxx::m,
                ::cxx::a,
                ::cxx::g,
                ::cxx::e,
                ::cxx::F,
                ::cxx::o,
                ::cxx::r,
                ::cxx::m,
                ::cxx::a,
                ::cxx::t,
            );
            type Kind = cxx::kind::Trivial;
        }
        unsafe impl cxx::ExternType for bindgen::root::ZXing::BarcodeFormat {
            type Id = (
                ::cxx::Z,
                ::cxx::X,
                ::cxx::i,
                ::cxx::n,
                ::cxx::g,
                (),
                ::cxx::B,
                ::cxx::a,
                ::cxx::r,
                ::cxx::c,
                ::cxx::o,
                ::cxx::d,
                ::cxx::e,
                ::cxx::F,
                ::cxx::o,
                ::cxx::r,
                ::cxx::m,
                ::cxx::a,
                ::cxx::t,
            );
            type Kind = cxx::kind::Trivial;
        }
        unsafe impl cxx::ExternType for bindgen::root::ZXing::Error {
            type Id = (
                ::cxx::Z,
                ::cxx::X,
                ::cxx::i,
                ::cxx::n,
                ::cxx::g,
                (),
                ::cxx::E,
                ::cxx::r,
                ::cxx::r,
                ::cxx::o,
                ::cxx::r,
            );
            type Kind = cxx::kind::Opaque;
        }
        unsafe impl cxx::ExternType for bindgen::root::ZXing::ByteArray {
            type Id = (
                ::cxx::Z,
                ::cxx::X,
                ::cxx::i,
                ::cxx::n,
                ::cxx::g,
                (),
                ::cxx::B,
                ::cxx::y,
                ::cxx::t,
                ::cxx::e,
                ::cxx::A,
                ::cxx::r,
                ::cxx::r,
                ::cxx::a,
                ::cxx::y,
            );
            type Kind = cxx::kind::Opaque;
        }
        unsafe impl cxx::ExternType for bindgen::root::ZXing::ContentType {
            type Id = (
                ::cxx::Z,
                ::cxx::X,
                ::cxx::i,
                ::cxx::n,
                ::cxx::g,
                (),
                ::cxx::C,
                ::cxx::o,
                ::cxx::n,
                ::cxx::t,
                ::cxx::e,
                ::cxx::n,
                ::cxx::t,
                ::cxx::T,
                ::cxx::y,
                ::cxx::p,
                ::cxx::e,
            );
            type Kind = cxx::kind::Trivial;
        }
        unsafe impl cxx::ExternType for bindgen::root::ZXing::SymbologyIdentifier {
            type Id = (
                ::cxx::Z,
                ::cxx::X,
                ::cxx::i,
                ::cxx::n,
                ::cxx::g,
                (),
                ::cxx::S,
                ::cxx::y,
                ::cxx::m,
                ::cxx::b,
                ::cxx::o,
                ::cxx::l,
                ::cxx::o,
                ::cxx::g,
                ::cxx::y,
                ::cxx::I,
                ::cxx::d,
                ::cxx::e,
                ::cxx::n,
                ::cxx::t,
                ::cxx::i,
                ::cxx::f,
                ::cxx::i,
                ::cxx::e,
                ::cxx::r,
            );
            type Kind = cxx::kind::Opaque;
        }
        mod bindgen {
            pub(super) mod root {
                pub use cxxbridge::ZXing_PointT_int_AutocxxConcrete;
                pub mod ZXing {
                    /// Simple class that stores a non-owning const pointer to image data plus layout and format information.
                    #[repr(C, align(8))]
                    pub struct ImageView {
                        _pinned: core::marker::PhantomData<core::marker::PhantomPinned>,
                        _non_send_sync: core::marker::PhantomData<[*const u8; 0]>,
                        _data: [u8; 32],
                    }
                    pub type PointI = root::ZXing_PointT_int_AutocxxConcrete;
                    /// @brief The Result class encapsulates the result of decoding a barcode within an image.
                    #[repr(C, align(8))]
                    pub struct Result {
                        _pinned: core::marker::PhantomData<core::marker::PhantomPinned>,
                        _non_send_sync: core::marker::PhantomData<[*const u8; 0]>,
                        _data: [u8; 216],
                    }
                    pub type Results = cxx::CxxVector<root::ZXing::Result>;
                    /** Read barcode from an ImageView

 @param image  view of the image data including layout and format
 @param options  optional ReaderOptions to parameterize / speed up detection
 @return #Result structure*/
                    pub fn ReadBarcode<'a>(
                        image: &'a root::ZXing::ImageView,
                        options: &'a root::ZXing::ReaderOptions,
                    ) -> impl autocxx::moveit::new::New<
                        Output = root::ZXing::Result,
                    > + 'a {
                        unsafe {
                            autocxx::moveit::new::by_raw(move |placement_return_type| {
                                let placement_return_type = placement_return_type
                                    .get_unchecked_mut()
                                    .as_mut_ptr();
                                cxxbridge::ReadBarcode_autocxx_wrapper_0x9a467600c97d87d4(
                                    image,
                                    options,
                                    placement_return_type,
                                )
                            })
                        }
                    }
                    #[repr(u32)]
                    pub enum ImageFormat {
                        None = 0,
                        Lum = 16777216,
                        RGB = 50331906,
                        BGR = 50462976,
                        RGBX = 67109122,
                        XRGB = 67174915,
                        BGRX = 67240192,
                        XBGR = 67305985,
                    }
                    #[automatically_derived]
                    impl ::core::clone::Clone for ImageFormat {
                        #[inline]
                        fn clone(&self) -> ImageFormat {
                            match self {
                                ImageFormat::None => ImageFormat::None,
                                ImageFormat::Lum => ImageFormat::Lum,
                                ImageFormat::RGB => ImageFormat::RGB,
                                ImageFormat::BGR => ImageFormat::BGR,
                                ImageFormat::RGBX => ImageFormat::RGBX,
                                ImageFormat::XRGB => ImageFormat::XRGB,
                                ImageFormat::BGRX => ImageFormat::BGRX,
                                ImageFormat::XBGR => ImageFormat::XBGR,
                            }
                        }
                    }
                    #[automatically_derived]
                    impl ::core::hash::Hash for ImageFormat {
                        #[inline]
                        fn hash<__H: ::core::hash::Hasher>(
                            &self,
                            state: &mut __H,
                        ) -> () {
                            let __self_tag = ::core::intrinsics::discriminant_value(
                                self,
                            );
                            ::core::hash::Hash::hash(&__self_tag, state)
                        }
                    }
                    #[automatically_derived]
                    impl ::core::marker::StructuralPartialEq for ImageFormat {}
                    #[automatically_derived]
                    impl ::core::cmp::PartialEq for ImageFormat {
                        #[inline]
                        fn eq(&self, other: &ImageFormat) -> bool {
                            let __self_tag = ::core::intrinsics::discriminant_value(
                                self,
                            );
                            let __arg1_tag = ::core::intrinsics::discriminant_value(
                                other,
                            );
                            __self_tag == __arg1_tag
                        }
                    }
                    #[automatically_derived]
                    impl ::core::marker::StructuralEq for ImageFormat {}
                    #[automatically_derived]
                    impl ::core::cmp::Eq for ImageFormat {
                        #[inline]
                        #[doc(hidden)]
                        #[coverage(off)]
                        fn assert_receiver_is_total_eq(&self) -> () {}
                    }
                    #[repr(i32)]
                    /// Enumerates barcode formats known to this package.
                    pub enum BarcodeFormat {
                        ///< Used as a return value if no valid barcode has been detected
                        None = 0,
                        ///< Aztec
                        Aztec = 1,
                        ///< Codabar
                        Codabar = 2,
                        ///< Code39
                        Code39 = 4,
                        ///< Code93
                        Code93 = 8,
                        ///< Code128
                        Code128 = 16,
                        ///< GS1 DataBar, formerly known as RSS 14
                        DataBar = 32,
                        ///< GS1 DataBar Expanded, formerly known as RSS EXPANDED
                        DataBarExpanded = 64,
                        ///< DataMatrix
                        DataMatrix = 128,
                        ///< EAN-8
                        EAN8 = 256,
                        ///< EAN-13
                        EAN13 = 512,
                        ///< ITF (Interleaved Two of Five)
                        ITF = 1024,
                        ///< MaxiCode
                        MaxiCode = 2048,
                        ///< PDF417
                        PDF417 = 4096,
                        ///< QR Code
                        QRCode = 8192,
                        ///< UPC-A
                        UPCA = 16384,
                        ///< UPC-E
                        UPCE = 32768,
                        ///< Micro QR Code
                        MicroQRCode = 65536,
                        ///< Rectangular Micro QR Code
                        RMQRCode = 131072,
                        ///< DX Film Edge Barcode
                        DXFilmEdge = 262144,
                        LinearCodes = 313214,
                        MatrixCodes = 211073,
                        Any = 524287,
                    }
                    #[automatically_derived]
                    impl ::core::clone::Clone for BarcodeFormat {
                        #[inline]
                        fn clone(&self) -> BarcodeFormat {
                            match self {
                                BarcodeFormat::None => BarcodeFormat::None,
                                BarcodeFormat::Aztec => BarcodeFormat::Aztec,
                                BarcodeFormat::Codabar => BarcodeFormat::Codabar,
                                BarcodeFormat::Code39 => BarcodeFormat::Code39,
                                BarcodeFormat::Code93 => BarcodeFormat::Code93,
                                BarcodeFormat::Code128 => BarcodeFormat::Code128,
                                BarcodeFormat::DataBar => BarcodeFormat::DataBar,
                                BarcodeFormat::DataBarExpanded => {
                                    BarcodeFormat::DataBarExpanded
                                }
                                BarcodeFormat::DataMatrix => BarcodeFormat::DataMatrix,
                                BarcodeFormat::EAN8 => BarcodeFormat::EAN8,
                                BarcodeFormat::EAN13 => BarcodeFormat::EAN13,
                                BarcodeFormat::ITF => BarcodeFormat::ITF,
                                BarcodeFormat::MaxiCode => BarcodeFormat::MaxiCode,
                                BarcodeFormat::PDF417 => BarcodeFormat::PDF417,
                                BarcodeFormat::QRCode => BarcodeFormat::QRCode,
                                BarcodeFormat::UPCA => BarcodeFormat::UPCA,
                                BarcodeFormat::UPCE => BarcodeFormat::UPCE,
                                BarcodeFormat::MicroQRCode => BarcodeFormat::MicroQRCode,
                                BarcodeFormat::RMQRCode => BarcodeFormat::RMQRCode,
                                BarcodeFormat::DXFilmEdge => BarcodeFormat::DXFilmEdge,
                                BarcodeFormat::LinearCodes => BarcodeFormat::LinearCodes,
                                BarcodeFormat::MatrixCodes => BarcodeFormat::MatrixCodes,
                                BarcodeFormat::Any => BarcodeFormat::Any,
                            }
                        }
                    }
                    #[automatically_derived]
                    impl ::core::hash::Hash for BarcodeFormat {
                        #[inline]
                        fn hash<__H: ::core::hash::Hasher>(
                            &self,
                            state: &mut __H,
                        ) -> () {
                            let __self_tag = ::core::intrinsics::discriminant_value(
                                self,
                            );
                            ::core::hash::Hash::hash(&__self_tag, state)
                        }
                    }
                    #[automatically_derived]
                    impl ::core::marker::StructuralPartialEq for BarcodeFormat {}
                    #[automatically_derived]
                    impl ::core::cmp::PartialEq for BarcodeFormat {
                        #[inline]
                        fn eq(&self, other: &BarcodeFormat) -> bool {
                            let __self_tag = ::core::intrinsics::discriminant_value(
                                self,
                            );
                            let __arg1_tag = ::core::intrinsics::discriminant_value(
                                other,
                            );
                            __self_tag == __arg1_tag
                        }
                    }
                    #[automatically_derived]
                    impl ::core::marker::StructuralEq for BarcodeFormat {}
                    #[automatically_derived]
                    impl ::core::cmp::Eq for BarcodeFormat {
                        #[inline]
                        #[doc(hidden)]
                        #[coverage(off)]
                        fn assert_receiver_is_total_eq(&self) -> () {}
                    }
                    #[repr(C, align(8))]
                    pub struct Error {
                        _pinned: core::marker::PhantomData<core::marker::PhantomPinned>,
                        _non_send_sync: core::marker::PhantomData<[*const u8; 0]>,
                        _data: [u8; 48],
                    }
                    ///ByteArray is an extension of std::vector<unsigned char>.
                    #[repr(C, align(8))]
                    pub struct ByteArray {
                        _pinned: core::marker::PhantomData<core::marker::PhantomPinned>,
                        _non_send_sync: core::marker::PhantomData<[*const u8; 0]>,
                        _data: [u8; 24],
                    }
                    pub use super::super::super::ZXing::TextMode;
                    #[repr(i32)]
                    pub enum ContentType {
                        Text = 0,
                        Binary = 1,
                        Mixed = 2,
                        GS1 = 3,
                        ISO15434 = 4,
                        UnknownECI = 5,
                    }
                    #[automatically_derived]
                    impl ::core::clone::Clone for ContentType {
                        #[inline]
                        fn clone(&self) -> ContentType {
                            match self {
                                ContentType::Text => ContentType::Text,
                                ContentType::Binary => ContentType::Binary,
                                ContentType::Mixed => ContentType::Mixed,
                                ContentType::GS1 => ContentType::GS1,
                                ContentType::ISO15434 => ContentType::ISO15434,
                                ContentType::UnknownECI => ContentType::UnknownECI,
                            }
                        }
                    }
                    #[automatically_derived]
                    impl ::core::hash::Hash for ContentType {
                        #[inline]
                        fn hash<__H: ::core::hash::Hasher>(
                            &self,
                            state: &mut __H,
                        ) -> () {
                            let __self_tag = ::core::intrinsics::discriminant_value(
                                self,
                            );
                            ::core::hash::Hash::hash(&__self_tag, state)
                        }
                    }
                    #[automatically_derived]
                    impl ::core::marker::StructuralPartialEq for ContentType {}
                    #[automatically_derived]
                    impl ::core::cmp::PartialEq for ContentType {
                        #[inline]
                        fn eq(&self, other: &ContentType) -> bool {
                            let __self_tag = ::core::intrinsics::discriminant_value(
                                self,
                            );
                            let __arg1_tag = ::core::intrinsics::discriminant_value(
                                other,
                            );
                            __self_tag == __arg1_tag
                        }
                    }
                    #[automatically_derived]
                    impl ::core::marker::StructuralEq for ContentType {}
                    #[automatically_derived]
                    impl ::core::cmp::Eq for ContentType {
                        #[inline]
                        #[doc(hidden)]
                        #[coverage(off)]
                        fn assert_receiver_is_total_eq(&self) -> () {}
                    }
                    pub type Position = root::ZXing::QuadrilateralI;
                    pub use cxxbridge::QuadrilateralI;
                    #[repr(C, align(1))]
                    pub struct SymbologyIdentifier {
                        _pinned: core::marker::PhantomData<core::marker::PhantomPinned>,
                        _non_send_sync: core::marker::PhantomData<[*const u8; 0]>,
                        _data: [u8; 4],
                    }
                    pub use cxxbridge::DecoderResult;
                    pub use super::super::super::ZXing::ReaderOptions;
                    impl ImageView {
                        pub fn cropped<'a>(
                            self: &'a root::ZXing::ImageView,
                            left: autocxx::c_int,
                            top: autocxx::c_int,
                            width: autocxx::c_int,
                            height: autocxx::c_int,
                        ) -> impl autocxx::moveit::new::New<
                            Output = root::ZXing::ImageView,
                        > + 'a {
                            unsafe {
                                autocxx::moveit::new::by_raw(move |placement_return_type| {
                                    let placement_return_type = placement_return_type
                                        .get_unchecked_mut()
                                        .as_mut_ptr();
                                    cxxbridge::cropped_autocxx_wrapper_0x9a467600c97d87d4(
                                        self,
                                        left,
                                        top,
                                        width,
                                        height,
                                        placement_return_type,
                                    )
                                })
                            }
                        }
                        pub fn rotated<'a>(
                            self: &'a root::ZXing::ImageView,
                            degree: autocxx::c_int,
                        ) -> impl autocxx::moveit::new::New<
                            Output = root::ZXing::ImageView,
                        > + 'a {
                            unsafe {
                                autocxx::moveit::new::by_raw(move |placement_return_type| {
                                    let placement_return_type = placement_return_type
                                        .get_unchecked_mut()
                                        .as_mut_ptr();
                                    cxxbridge::rotated_autocxx_wrapper_0x9a467600c97d87d4(
                                        self,
                                        degree,
                                        placement_return_type,
                                    )
                                })
                            }
                        }
                        pub fn subsampled<'a>(
                            self: &'a root::ZXing::ImageView,
                            scale: autocxx::c_int,
                        ) -> impl autocxx::moveit::new::New<
                            Output = root::ZXing::ImageView,
                        > + 'a {
                            unsafe {
                                autocxx::moveit::new::by_raw(move |placement_return_type| {
                                    let placement_return_type = placement_return_type
                                        .get_unchecked_mut()
                                        .as_mut_ptr();
                                    cxxbridge::subsampled_autocxx_wrapper_0x9a467600c97d87d4(
                                        self,
                                        scale,
                                        placement_return_type,
                                    )
                                })
                            }
                        }
                        /** ImageView constructor

 @param data  pointer to image buffer
 @param width  image width in pixels
 @param height  image height in pixels
 @param format  image/pixel format
 @param rowStride  optional row stride in bytes, default is width * pixStride
 @param pixStride  optional pixel stride in bytes, default is calculated from format*/
                        pub unsafe fn new(
                            data: *const u8,
                            width: autocxx::c_int,
                            height: autocxx::c_int,
                            format: root::ZXing::ImageFormat,
                            rowStride: autocxx::c_int,
                            pixStride: autocxx::c_int,
                        ) -> impl autocxx::moveit::new::New<Output = Self> {
                            autocxx::moveit::new::by_raw(move |this| {
                                let this = this.get_unchecked_mut().as_mut_ptr();
                                cxxbridge::new_autocxx_autocxx_wrapper_0x9a467600c97d87d4(
                                    this,
                                    data,
                                    width,
                                    height,
                                    format,
                                    rowStride,
                                    pixStride,
                                )
                            })
                        }
                    }
                    impl Result {
                        ///autocxx bindings couldn't be generated: This method is private
                        fn setIsInverted(_uhoh: autocxx::BindingGenerationFailure) {}
                        ///autocxx bindings couldn't be generated: Function setReaderOptions has a reference return value, but >1 input reference parameters, so the lifetime of the output reference cannot be deduced.
                        fn setReaderOptions(_uhoh: autocxx::BindingGenerationFailure) {}
                        pub fn format(
                            self: &root::ZXing::Result,
                        ) -> root::ZXing::BarcodeFormat {
                            cxxbridge::ZXing_Result_format_autocxx_wrapper_0x9a467600c97d87d4(
                                self,
                            )
                        }
                        /// @brief bytesECI is the raw / standard content following the ECI protocol
                        pub fn bytesECI<'a>(
                            self: &'a root::ZXing::Result,
                        ) -> impl autocxx::moveit::new::New<
                            Output = root::ZXing::ByteArray,
                        > + 'a {
                            unsafe {
                                autocxx::moveit::new::by_raw(move |placement_return_type| {
                                    let placement_return_type = placement_return_type
                                        .get_unchecked_mut()
                                        .as_mut_ptr();
                                    cxxbridge::ZXing_Result_bytesECI_autocxx_wrapper_0x9a467600c97d87d4(
                                        self,
                                        placement_return_type,
                                    )
                                })
                            }
                        }
                        /// @brief text returns the bytes() content rendered to unicode/utf8 text accoring to specified TextMode
                        pub fn text(
                            self: &root::ZXing::Result,
                            mode: impl autocxx::ValueParam<root::ZXing::TextMode>,
                        ) -> cxx::UniquePtr<cxx::CxxString> {
                            let mut space0 = autocxx::ValueParamHandler::default();
                            let mut space0 = unsafe {
                                ::core::pin::Pin::new_unchecked(&mut space0)
                            };
                            unsafe {
                                space0.as_mut().populate(mode);
                                cxxbridge::ZXing_Result_text_autocxx_wrapper_0x9a467600c97d87d4(
                                    self,
                                    space0.get_ptr(),
                                )
                            }
                        }
                        /// @brief text returns the bytes() content rendered to unicode/utf8 text accoring to the TextMode set in the ReaderOptions
                        pub fn text1(
                            self: &root::ZXing::Result,
                        ) -> cxx::UniquePtr<cxx::CxxString> {
                            cxxbridge::text1_autocxx_wrapper_0x9a467600c97d87d4(self)
                        }
                        /// @brief ecLevel returns the error correction level of the symbol (empty string if not applicable)
                        pub fn ecLevel(
                            self: &root::ZXing::Result,
                        ) -> cxx::UniquePtr<cxx::CxxString> {
                            cxxbridge::ecLevel_autocxx_wrapper_0x9a467600c97d87d4(self)
                        }
                        ///autocxx bindings couldn't be generated: Problem handling function argument pos: Found an attempt at using a forward declaration (ZXing::QuadrilateralI) inside a templated cxx type such as UniquePtr or CxxVector. If the forward declaration is a typedef, perhaps autocxx wasn't sure whether or not it involved a forward declaration. If you're sure it didn't, then you may be able to solve this by using instantiable!.
                        fn setPosition(_uhoh: autocxx::BindingGenerationFailure) {}
                        /// @brief symbologyIdentifier Symbology identifier "]cm" where "c" is symbology code character, "m" the modifier.
                        pub fn symbologyIdentifier(
                            self: &root::ZXing::Result,
                        ) -> cxx::UniquePtr<cxx::CxxString> {
                            cxxbridge::symbologyIdentifier_autocxx_wrapper_0x9a467600c97d87d4(
                                self,
                            )
                        }
                        /** @brief sequenceId id to check if a set of symbols belongs to the same structured append sequence.

 If the symbology does not support this feature, the returned value is empty (see MaxiCode).
 For QR Code, this is the parity integer converted to a string.
 For PDF417 and DataMatrix, this is the "fileId".*/
                        pub fn sequenceId(
                            self: &root::ZXing::Result,
                        ) -> cxx::UniquePtr<cxx::CxxString> {
                            cxxbridge::sequenceId_autocxx_wrapper_0x9a467600c97d87d4(
                                self,
                            )
                        }
                        /// @brief version QRCode / DataMatrix / Aztec version or size.
                        pub fn version(
                            self: &root::ZXing::Result,
                        ) -> cxx::UniquePtr<cxx::CxxString> {
                            cxxbridge::version_autocxx_wrapper_0x9a467600c97d87d4(self)
                        }
                        pub fn new() -> impl autocxx::moveit::new::New<Output = Self> {
                            unsafe {
                                autocxx::moveit::new::by_raw(move |this| {
                                    let this = this.get_unchecked_mut().as_mut_ptr();
                                    cxxbridge::ZXing_Result_new_autocxx_autocxx_wrapper_0x9a467600c97d87d4(
                                        this,
                                    )
                                })
                            }
                        }
                        pub fn new1<'a>(
                            text: &'a cxx::CxxString,
                            y: autocxx::c_int,
                            xStart: autocxx::c_int,
                            xStop: autocxx::c_int,
                            format: root::ZXing::BarcodeFormat,
                            si: impl autocxx::ValueParam<
                                root::ZXing::SymbologyIdentifier,
                            > + 'a,
                            error: impl autocxx::ValueParam<root::ZXing::Error> + 'a,
                            readerInit: bool,
                        ) -> impl autocxx::moveit::new::New<Output = Self> + 'a {
                            unsafe {
                                autocxx::moveit::new::by_raw(move |this| {
                                    let mut space0 = autocxx::ValueParamHandler::default();
                                    let mut space0 = ::core::pin::Pin::new_unchecked(
                                        &mut space0,
                                    );
                                    space0.as_mut().populate(si);
                                    let mut space1 = autocxx::ValueParamHandler::default();
                                    let mut space1 = ::core::pin::Pin::new_unchecked(
                                        &mut space1,
                                    );
                                    space1.as_mut().populate(error);
                                    let this = this.get_unchecked_mut().as_mut_ptr();
                                    cxxbridge::ZXing_Result_new1_autocxx_wrapper_0x9a467600c97d87d4(
                                        this,
                                        text,
                                        y,
                                        xStart,
                                        xStop,
                                        format,
                                        space0.get_ptr(),
                                        space1.get_ptr(),
                                        readerInit,
                                    )
                                })
                            }
                        }
                        pub fn new2(
                            decodeResult: impl autocxx::RValueParam<
                                root::ZXing::DecoderResult,
                            >,
                            position: impl autocxx::RValueParam<
                                root::ZXing::QuadrilateralI,
                            >,
                            format: root::ZXing::BarcodeFormat,
                        ) -> impl autocxx::moveit::new::New<Output = Self> {
                            unsafe {
                                autocxx::moveit::new::by_raw(move |this| {
                                    let mut space0 = autocxx::RValueParamHandler::default();
                                    let mut space0 = ::core::pin::Pin::new_unchecked(
                                        &mut space0,
                                    );
                                    space0.as_mut().populate(decodeResult);
                                    let mut space1 = autocxx::RValueParamHandler::default();
                                    let mut space1 = ::core::pin::Pin::new_unchecked(
                                        &mut space1,
                                    );
                                    space1.as_mut().populate(position);
                                    let this = this.get_unchecked_mut().as_mut_ptr();
                                    cxxbridge::ZXing_Result_new2_autocxx_wrapper_0x9a467600c97d87d4(
                                        this,
                                        space0.get_ptr(),
                                        space1.get_ptr(),
                                        format,
                                    )
                                })
                            }
                        }
                    }
                    unsafe impl autocxx::moveit::MakeCppStorage
                    for root::ZXing::ImageView {
                        unsafe fn allocate_uninitialized_cpp_storage() -> *mut root::ZXing::ImageView {
                            cxxbridge::ImageView_alloc_autocxx_wrapper_0x9a467600c97d87d4()
                        }
                        unsafe fn free_uninitialized_cpp_storage(
                            arg0: *mut root::ZXing::ImageView,
                        ) {
                            cxxbridge::ImageView_free_autocxx_wrapper_0x9a467600c97d87d4(
                                arg0,
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::MakeCppStorage for root::ZXing::Result {
                        unsafe fn allocate_uninitialized_cpp_storage() -> *mut root::ZXing::Result {
                            cxxbridge::Result_alloc_autocxx_wrapper_0x9a467600c97d87d4()
                        }
                        unsafe fn free_uninitialized_cpp_storage(
                            arg0: *mut root::ZXing::Result,
                        ) {
                            cxxbridge::Result_free_autocxx_wrapper_0x9a467600c97d87d4(
                                arg0,
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::new::MoveNew
                    for root::ZXing::ImageView {
                        ///Synthesized move constructor.
                        unsafe fn move_new(
                            mut other: ::core::pin::Pin<
                                autocxx::moveit::MoveRef<'_, root::ZXing::ImageView>,
                            >,
                            this: ::core::pin::Pin<
                                &mut ::core::mem::MaybeUninit<root::ZXing::ImageView>,
                            >,
                        ) {
                            cxxbridge::ZXing_ImageView_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                                this.get_unchecked_mut().as_mut_ptr(),
                                {
                                    let r: &mut _ = ::core::pin::Pin::into_inner_unchecked(
                                        other.as_mut(),
                                    );
                                    r
                                },
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::new::CopyNew
                    for root::ZXing::ImageView {
                        ///Synthesized copy constructor.
                        unsafe fn copy_new(
                            other: &root::ZXing::ImageView,
                            this: ::core::pin::Pin<
                                &mut ::core::mem::MaybeUninit<root::ZXing::ImageView>,
                            >,
                        ) {
                            cxxbridge::ZXing_ImageView_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                                this.get_unchecked_mut().as_mut_ptr(),
                                other,
                            )
                        }
                    }
                    impl Drop for root::ZXing::ImageView {
                        ///Synthesized destructor.
                        fn drop(self: &mut root::ZXing::ImageView) {
                            unsafe {
                                cxxbridge::ImageView_synthetic_destructor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                                    self,
                                )
                            }
                        }
                    }
                    impl Drop for root::ZXing::Result {
                        ///Synthesized destructor.
                        fn drop(self: &mut root::ZXing::Result) {
                            unsafe {
                                cxxbridge::Result_synthetic_destructor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                                    self,
                                )
                            }
                        }
                    }
                    unsafe impl autocxx::moveit::MakeCppStorage for root::ZXing::Error {
                        unsafe fn allocate_uninitialized_cpp_storage() -> *mut root::ZXing::Error {
                            cxxbridge::Error_alloc_autocxx_wrapper_0x9a467600c97d87d4()
                        }
                        unsafe fn free_uninitialized_cpp_storage(
                            arg0: *mut root::ZXing::Error,
                        ) {
                            cxxbridge::Error_free_autocxx_wrapper_0x9a467600c97d87d4(
                                arg0,
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::new::MoveNew for root::ZXing::Error {
                        ///Synthesized move constructor.
                        unsafe fn move_new(
                            mut other: ::core::pin::Pin<
                                autocxx::moveit::MoveRef<'_, root::ZXing::Error>,
                            >,
                            this: ::core::pin::Pin<
                                &mut ::core::mem::MaybeUninit<root::ZXing::Error>,
                            >,
                        ) {
                            cxxbridge::ZXing_Error_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                                this.get_unchecked_mut().as_mut_ptr(),
                                {
                                    let r: &mut _ = ::core::pin::Pin::into_inner_unchecked(
                                        other.as_mut(),
                                    );
                                    r
                                },
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::new::CopyNew for root::ZXing::Error {
                        ///Synthesized copy constructor.
                        unsafe fn copy_new(
                            other: &root::ZXing::Error,
                            this: ::core::pin::Pin<
                                &mut ::core::mem::MaybeUninit<root::ZXing::Error>,
                            >,
                        ) {
                            cxxbridge::ZXing_Error_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                                this.get_unchecked_mut().as_mut_ptr(),
                                other,
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::MakeCppStorage
                    for root::ZXing::ByteArray {
                        unsafe fn allocate_uninitialized_cpp_storage() -> *mut root::ZXing::ByteArray {
                            cxxbridge::ByteArray_alloc_autocxx_wrapper_0x9a467600c97d87d4()
                        }
                        unsafe fn free_uninitialized_cpp_storage(
                            arg0: *mut root::ZXing::ByteArray,
                        ) {
                            cxxbridge::ByteArray_free_autocxx_wrapper_0x9a467600c97d87d4(
                                arg0,
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::new::MoveNew
                    for root::ZXing::ByteArray {
                        ///Synthesized move constructor.
                        unsafe fn move_new(
                            mut other: ::core::pin::Pin<
                                autocxx::moveit::MoveRef<'_, root::ZXing::ByteArray>,
                            >,
                            this: ::core::pin::Pin<
                                &mut ::core::mem::MaybeUninit<root::ZXing::ByteArray>,
                            >,
                        ) {
                            cxxbridge::ZXing_ByteArray_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                                this.get_unchecked_mut().as_mut_ptr(),
                                {
                                    let r: &mut _ = ::core::pin::Pin::into_inner_unchecked(
                                        other.as_mut(),
                                    );
                                    r
                                },
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::new::CopyNew
                    for root::ZXing::ByteArray {
                        ///Synthesized copy constructor.
                        unsafe fn copy_new(
                            other: &root::ZXing::ByteArray,
                            this: ::core::pin::Pin<
                                &mut ::core::mem::MaybeUninit<root::ZXing::ByteArray>,
                            >,
                        ) {
                            cxxbridge::ZXing_ByteArray_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                                this.get_unchecked_mut().as_mut_ptr(),
                                other,
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::MakeCppStorage
                    for root::ZXing::SymbologyIdentifier {
                        unsafe fn allocate_uninitialized_cpp_storage() -> *mut root::ZXing::SymbologyIdentifier {
                            cxxbridge::SymbologyIdentifier_alloc_autocxx_wrapper_0x9a467600c97d87d4()
                        }
                        unsafe fn free_uninitialized_cpp_storage(
                            arg0: *mut root::ZXing::SymbologyIdentifier,
                        ) {
                            cxxbridge::SymbologyIdentifier_free_autocxx_wrapper_0x9a467600c97d87d4(
                                arg0,
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::new::MoveNew
                    for root::ZXing::SymbologyIdentifier {
                        ///Synthesized move constructor.
                        unsafe fn move_new(
                            mut other: ::core::pin::Pin<
                                autocxx::moveit::MoveRef<
                                    '_,
                                    root::ZXing::SymbologyIdentifier,
                                >,
                            >,
                            this: ::core::pin::Pin<
                                &mut ::core::mem::MaybeUninit<
                                    root::ZXing::SymbologyIdentifier,
                                >,
                            >,
                        ) {
                            cxxbridge::ZXing_SymbologyIdentifier_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                                this.get_unchecked_mut().as_mut_ptr(),
                                {
                                    let r: &mut _ = ::core::pin::Pin::into_inner_unchecked(
                                        other.as_mut(),
                                    );
                                    r
                                },
                            )
                        }
                    }
                    unsafe impl autocxx::moveit::new::CopyNew
                    for root::ZXing::SymbologyIdentifier {
                        ///Synthesized copy constructor.
                        unsafe fn copy_new(
                            other: &root::ZXing::SymbologyIdentifier,
                            this: ::core::pin::Pin<
                                &mut ::core::mem::MaybeUninit<
                                    root::ZXing::SymbologyIdentifier,
                                >,
                            >,
                        ) {
                            cxxbridge::ZXing_SymbologyIdentifier_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                                this.get_unchecked_mut().as_mut_ptr(),
                                other,
                            )
                        }
                    }
                    #[allow(unused_imports)]
                    use self::super::super::super::{cxxbridge, ToCppString};
                    #[allow(unused_imports)]
                    use self::super::super::root;
                }
                #[allow(unused_imports)]
                use self::super::super::{cxxbridge, ToCppString};
                #[allow(unused_imports)]
                use self::super::root;
            }
        }
        #[deny(improper_ctypes, improper_ctypes_definitions)]
        #[allow(clippy::unknown_clippy_lints)]
        #[allow(
            non_camel_case_types,
            non_snake_case,
            unused_unsafe,
            clippy::extra_unused_type_parameters,
            clippy::items_after_statements,
            clippy::no_effect_underscore_binding,
            clippy::ptr_as_ptr,
            clippy::upper_case_acronyms,
            clippy::use_self,
        )]
        mod cxxbridge {
            pub fn autocxx_make_string_0x9a467600c97d87d4(
                str_: &str,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$autocxx_make_string_0x9a467600c97d87d4"]
                    fn __autocxx_make_string_0x9a467600c97d87d4(
                        str_: ::cxx::private::RustStr,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    ::cxx::UniquePtr::from_raw(
                        __autocxx_make_string_0x9a467600c97d87d4(
                            ::cxx::private::RustStr::from(str_),
                        ),
                    )
                }
            }
            pub unsafe fn ImageView_alloc_autocxx_wrapper_0x9a467600c97d87d4() -> *mut ImageView {
                extern "C" {
                    #[link_name = "cxxbridge1$ImageView_alloc_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ImageView_alloc_autocxx_wrapper_0x9a467600c97d87d4() -> *mut ::cxx::core::ffi::c_void;
                }
                unsafe { __ImageView_alloc_autocxx_wrapper_0x9a467600c97d87d4().cast() }
            }
            pub unsafe fn ImageView_free_autocxx_wrapper_0x9a467600c97d87d4(
                arg0: *mut ImageView,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ImageView_free_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ImageView_free_autocxx_wrapper_0x9a467600c97d87d4(
                        arg0: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ImageView_free_autocxx_wrapper_0x9a467600c97d87d4(arg0.cast())
                }
            }
            /// Simple class that stores a non-owning const pointer to image data plus layout and format information.
            pub type ImageView = super::bindgen::root::ZXing::ImageView;
            pub unsafe fn Result_alloc_autocxx_wrapper_0x9a467600c97d87d4() -> *mut Result {
                extern "C" {
                    #[link_name = "cxxbridge1$Result_alloc_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __Result_alloc_autocxx_wrapper_0x9a467600c97d87d4() -> *mut ::cxx::core::ffi::c_void;
                }
                unsafe { __Result_alloc_autocxx_wrapper_0x9a467600c97d87d4().cast() }
            }
            pub unsafe fn Result_free_autocxx_wrapper_0x9a467600c97d87d4(
                arg0: *mut Result,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$Result_free_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __Result_free_autocxx_wrapper_0x9a467600c97d87d4(
                        arg0: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe { __Result_free_autocxx_wrapper_0x9a467600c97d87d4(arg0.cast()) }
            }
            /// @brief The Result class encapsulates the result of decoding a barcode within an image.
            pub type Result = super::bindgen::root::ZXing::Result;
            impl ImageView {
                pub fn width(&self) -> c_int {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$ImageView$width"]
                        fn __width(_: &ImageView, __return: *mut c_int);
                    }
                    unsafe {
                        let mut __return = ::cxx::core::mem::MaybeUninit::<
                            c_int,
                        >::uninit();
                        __width(self, __return.as_mut_ptr());
                        __return.assume_init()
                    }
                }
            }
            impl ImageView {
                pub fn height(&self) -> c_int {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$ImageView$height"]
                        fn __height(_: &ImageView, __return: *mut c_int);
                    }
                    unsafe {
                        let mut __return = ::cxx::core::mem::MaybeUninit::<
                            c_int,
                        >::uninit();
                        __height(self, __return.as_mut_ptr());
                        __return.assume_init()
                    }
                }
            }
            impl ImageView {
                pub fn pixStride(&self) -> c_int {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$ImageView$pixStride"]
                        fn __pixStride(_: &ImageView, __return: *mut c_int);
                    }
                    unsafe {
                        let mut __return = ::cxx::core::mem::MaybeUninit::<
                            c_int,
                        >::uninit();
                        __pixStride(self, __return.as_mut_ptr());
                        __return.assume_init()
                    }
                }
            }
            impl ImageView {
                pub fn rowStride(&self) -> c_int {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$ImageView$rowStride"]
                        fn __rowStride(_: &ImageView, __return: *mut c_int);
                    }
                    unsafe {
                        let mut __return = ::cxx::core::mem::MaybeUninit::<
                            c_int,
                        >::uninit();
                        __rowStride(self, __return.as_mut_ptr());
                        __return.assume_init()
                    }
                }
            }
            impl ImageView {
                pub fn format(&self) -> ImageFormat {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$ImageView$format"]
                        fn __format(_: &ImageView, __return: *mut ImageFormat);
                    }
                    unsafe {
                        let mut __return = ::cxx::core::mem::MaybeUninit::<
                            ImageFormat,
                        >::uninit();
                        __format(self, __return.as_mut_ptr());
                        __return.assume_init()
                    }
                }
            }
            impl ImageView {
                pub fn data(&self, x: c_int, y: c_int) -> *const u8 {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$ImageView$data"]
                        fn __data(
                            _: &ImageView,
                            x: *mut c_int,
                            y: *mut c_int,
                        ) -> *const u8;
                    }
                    unsafe {
                        let mut x = ::cxx::core::mem::MaybeUninit::new(x);
                        let mut y = ::cxx::core::mem::MaybeUninit::new(y);
                        __data(self, x.as_mut_ptr(), y.as_mut_ptr())
                    }
                }
            }
            pub unsafe fn cropped_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &ImageView,
                left: c_int,
                top: c_int,
                width: c_int,
                height: c_int,
                placement_return_type: *mut ImageView,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$cropped_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __cropped_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                        left: *mut c_int,
                        top: *mut c_int,
                        width: *mut c_int,
                        height: *mut c_int,
                        placement_return_type: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    let mut left = ::cxx::core::mem::MaybeUninit::new(left);
                    let mut top = ::cxx::core::mem::MaybeUninit::new(top);
                    let mut width = ::cxx::core::mem::MaybeUninit::new(width);
                    let mut height = ::cxx::core::mem::MaybeUninit::new(height);
                    __cropped_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this as *const ImageView
                            as *const ::cxx::core::ffi::c_void,
                        left.as_mut_ptr(),
                        top.as_mut_ptr(),
                        width.as_mut_ptr(),
                        height.as_mut_ptr(),
                        placement_return_type.cast(),
                    )
                }
            }
            pub unsafe fn rotated_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &ImageView,
                degree: c_int,
                placement_return_type: *mut ImageView,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$rotated_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __rotated_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                        degree: *mut c_int,
                        placement_return_type: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    let mut degree = ::cxx::core::mem::MaybeUninit::new(degree);
                    __rotated_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this as *const ImageView
                            as *const ::cxx::core::ffi::c_void,
                        degree.as_mut_ptr(),
                        placement_return_type.cast(),
                    )
                }
            }
            pub unsafe fn subsampled_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &ImageView,
                scale: c_int,
                placement_return_type: *mut ImageView,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$subsampled_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __subsampled_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                        scale: *mut c_int,
                        placement_return_type: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    let mut scale = ::cxx::core::mem::MaybeUninit::new(scale);
                    __subsampled_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this as *const ImageView
                            as *const ::cxx::core::ffi::c_void,
                        scale.as_mut_ptr(),
                        placement_return_type.cast(),
                    )
                }
            }
            /** ImageView constructor

 @param data  pointer to image buffer
 @param width  image width in pixels
 @param height  image height in pixels
 @param format  image/pixel format
 @param rowStride  optional row stride in bytes, default is width * pixStride
 @param pixStride  optional pixel stride in bytes, default is calculated from format*/
            pub unsafe fn new_autocxx_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut ImageView,
                data: *const u8,
                width: c_int,
                height: c_int,
                format: ImageFormat,
                rowStride: c_int,
                pixStride: c_int,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$new_autocxx_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __new_autocxx_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        data: *const u8,
                        width: *mut c_int,
                        height: *mut c_int,
                        format: *mut ImageFormat,
                        rowStride: *mut c_int,
                        pixStride: *mut c_int,
                    );
                }
                unsafe {
                    let mut width = ::cxx::core::mem::MaybeUninit::new(width);
                    let mut height = ::cxx::core::mem::MaybeUninit::new(height);
                    let mut format = ::cxx::core::mem::MaybeUninit::new(format);
                    let mut rowStride = ::cxx::core::mem::MaybeUninit::new(rowStride);
                    let mut pixStride = ::cxx::core::mem::MaybeUninit::new(pixStride);
                    __new_autocxx_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        data,
                        width.as_mut_ptr(),
                        height.as_mut_ptr(),
                        format.as_mut_ptr(),
                        rowStride.as_mut_ptr(),
                        pixStride.as_mut_ptr(),
                    )
                }
            }
            pub fn ToString_autocxx_wrapper_0x9a467600c97d87d4(
                format: BarcodeFormat,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$ToString_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ToString_autocxx_wrapper_0x9a467600c97d87d4(
                        format: *mut BarcodeFormat,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    let mut format = ::cxx::core::mem::MaybeUninit::new(format);
                    ::cxx::UniquePtr::from_raw(
                        __ToString_autocxx_wrapper_0x9a467600c97d87d4(
                            format.as_mut_ptr(),
                        ),
                    )
                }
            }
            impl Result {
                pub fn isValid(&self) -> bool {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$isValid"]
                        fn __isValid(_: &Result) -> bool;
                    }
                    unsafe { __isValid(self) }
                }
            }
            impl Result {
                pub fn error(&self) -> &Error {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$error"]
                        fn __error(_: &Result) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { &*__error(self).cast() }
                }
            }
            pub fn ZXing_Result_format_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &Result,
            ) -> BarcodeFormat {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_Result_format_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_Result_format_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                        __return: *mut BarcodeFormat,
                    );
                }
                unsafe {
                    let mut __return = ::cxx::core::mem::MaybeUninit::<
                        BarcodeFormat,
                    >::uninit();
                    __ZXing_Result_format_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this as *const Result
                            as *const ::cxx::core::ffi::c_void,
                        __return.as_mut_ptr(),
                    );
                    __return.assume_init()
                }
            }
            impl Result {
                /// @brief bytes is the raw / standard content without any modifications like character set conversions
                pub fn bytes(&self) -> &ByteArray {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$bytes"]
                        fn __bytes(_: &Result) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { &*__bytes(self).cast() }
                }
            }
            /// @brief bytesECI is the raw / standard content following the ECI protocol
            pub unsafe fn ZXing_Result_bytesECI_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &Result,
                placement_return_type: *mut ByteArray,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_Result_bytesECI_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_Result_bytesECI_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                        placement_return_type: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ZXing_Result_bytesECI_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this as *const Result
                            as *const ::cxx::core::ffi::c_void,
                        placement_return_type.cast(),
                    )
                }
            }
            /// @brief text returns the bytes() content rendered to unicode/utf8 text accoring to specified TextMode
            pub unsafe fn ZXing_Result_text_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &Result,
                mode: *mut TextMode,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_Result_text_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_Result_text_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                        mode: *mut ::cxx::core::ffi::c_void,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    ::cxx::UniquePtr::from_raw(
                        __ZXing_Result_text_autocxx_wrapper_0x9a467600c97d87d4(
                            autocxx_gen_this as *const Result
                                as *const ::cxx::core::ffi::c_void,
                            mode.cast(),
                        ),
                    )
                }
            }
            /// @brief text returns the bytes() content rendered to unicode/utf8 text accoring to the TextMode set in the ReaderOptions
            pub fn text1_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &Result,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$text1_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __text1_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    ::cxx::UniquePtr::from_raw(
                        __text1_autocxx_wrapper_0x9a467600c97d87d4(
                            autocxx_gen_this as *const Result
                                as *const ::cxx::core::ffi::c_void,
                        ),
                    )
                }
            }
            /// @brief ecLevel returns the error correction level of the symbol (empty string if not applicable)
            pub fn ecLevel_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &Result,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$ecLevel_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ecLevel_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    ::cxx::UniquePtr::from_raw(
                        __ecLevel_autocxx_wrapper_0x9a467600c97d87d4(
                            autocxx_gen_this as *const Result
                                as *const ::cxx::core::ffi::c_void,
                        ),
                    )
                }
            }
            impl Result {
                /// @brief contentType gives a hint to the type of content found (Text/Binary/GS1/etc.)
                pub fn contentType(&self) -> ContentType {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$contentType"]
                        fn __contentType(_: &Result, __return: *mut ContentType);
                    }
                    unsafe {
                        let mut __return = ::cxx::core::mem::MaybeUninit::<
                            ContentType,
                        >::uninit();
                        __contentType(self, __return.as_mut_ptr());
                        __return.assume_init()
                    }
                }
            }
            impl Result {
                /// @brief hasECI specifies wheter or not an ECI tag was found
                pub fn hasECI(&self) -> bool {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$hasECI"]
                        fn __hasECI(_: &Result) -> bool;
                    }
                    unsafe { __hasECI(self) }
                }
            }
            impl<'a> Result {
                pub fn position(&'a self) -> &'a QuadrilateralI {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$position"]
                        fn __position<'a>(_: &'a Result) -> &'a QuadrilateralI;
                    }
                    unsafe { __position(self) }
                }
            }
            impl Result {
                /// @brief orientation of barcode in degree, see also Position::orientation()
                pub fn orientation(&self) -> c_int {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$orientation"]
                        fn __orientation(_: &Result, __return: *mut c_int);
                    }
                    unsafe {
                        let mut __return = ::cxx::core::mem::MaybeUninit::<
                            c_int,
                        >::uninit();
                        __orientation(self, __return.as_mut_ptr());
                        __return.assume_init()
                    }
                }
            }
            impl Result {
                /// @brief isMirrored is the symbol mirrored (currently only supported by QRCode and DataMatrix)
                pub fn isMirrored(&self) -> bool {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$isMirrored"]
                        fn __isMirrored(_: &Result) -> bool;
                    }
                    unsafe { __isMirrored(self) }
                }
            }
            impl Result {
                /// @brief isInverted is the symbol inverted / has reveresed reflectance (see ReaderOptions::tryInvert)
                pub fn isInverted(&self) -> bool {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$isInverted"]
                        fn __isInverted(_: &Result) -> bool;
                    }
                    unsafe { __isInverted(self) }
                }
            }
            /// @brief symbologyIdentifier Symbology identifier "]cm" where "c" is symbology code character, "m" the modifier.
            pub fn symbologyIdentifier_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &Result,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$symbologyIdentifier_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __symbologyIdentifier_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    ::cxx::UniquePtr::from_raw(
                        __symbologyIdentifier_autocxx_wrapper_0x9a467600c97d87d4(
                            autocxx_gen_this as *const Result
                                as *const ::cxx::core::ffi::c_void,
                        ),
                    )
                }
            }
            impl Result {
                /** @brief sequenceSize number of symbols in a structured append sequence.

 If this is not part of a structured append sequence, the returned value is -1.
 If it is a structured append symbol but the total number of symbols is unknown, the
 returned value is 0 (see PDF417 if optional "Segment Count" not given).*/
                pub fn sequenceSize(&self) -> c_int {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$sequenceSize"]
                        fn __sequenceSize(_: &Result, __return: *mut c_int);
                    }
                    unsafe {
                        let mut __return = ::cxx::core::mem::MaybeUninit::<
                            c_int,
                        >::uninit();
                        __sequenceSize(self, __return.as_mut_ptr());
                        __return.assume_init()
                    }
                }
            }
            impl Result {
                /// @brief sequenceIndex the 0-based index of this symbol in a structured append sequence.
                pub fn sequenceIndex(&self) -> c_int {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$sequenceIndex"]
                        fn __sequenceIndex(_: &Result, __return: *mut c_int);
                    }
                    unsafe {
                        let mut __return = ::cxx::core::mem::MaybeUninit::<
                            c_int,
                        >::uninit();
                        __sequenceIndex(self, __return.as_mut_ptr());
                        __return.assume_init()
                    }
                }
            }
            /** @brief sequenceId id to check if a set of symbols belongs to the same structured append sequence.

 If the symbology does not support this feature, the returned value is empty (see MaxiCode).
 For QR Code, this is the parity integer converted to a string.
 For PDF417 and DataMatrix, this is the "fileId".*/
            pub fn sequenceId_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &Result,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$sequenceId_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __sequenceId_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    ::cxx::UniquePtr::from_raw(
                        __sequenceId_autocxx_wrapper_0x9a467600c97d87d4(
                            autocxx_gen_this as *const Result
                                as *const ::cxx::core::ffi::c_void,
                        ),
                    )
                }
            }
            impl Result {
                pub fn isLastInSequence(&self) -> bool {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$isLastInSequence"]
                        fn __isLastInSequence(_: &Result) -> bool;
                    }
                    unsafe { __isLastInSequence(self) }
                }
            }
            impl Result {
                pub fn isPartOfSequence(&self) -> bool {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$isPartOfSequence"]
                        fn __isPartOfSequence(_: &Result) -> bool;
                    }
                    unsafe { __isPartOfSequence(self) }
                }
            }
            impl Result {
                /// @brief readerInit Set if Reader Initialisation/Programming symbol.
                pub fn readerInit(&self) -> bool {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$readerInit"]
                        fn __readerInit(_: &Result) -> bool;
                    }
                    unsafe { __readerInit(self) }
                }
            }
            impl Result {
                /// @brief lineCount How many lines have been detected with this code (applies only to linear symbologies)
                pub fn lineCount(&self) -> c_int {
                    extern "C" {
                        #[link_name = "ZXing$cxxbridge1$Result$lineCount"]
                        fn __lineCount(_: &Result, __return: *mut c_int);
                    }
                    unsafe {
                        let mut __return = ::cxx::core::mem::MaybeUninit::<
                            c_int,
                        >::uninit();
                        __lineCount(self, __return.as_mut_ptr());
                        __return.assume_init()
                    }
                }
            }
            /// @brief version QRCode / DataMatrix / Aztec version or size.
            pub fn version_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: &Result,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$version_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __version_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *const ::cxx::core::ffi::c_void,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    ::cxx::UniquePtr::from_raw(
                        __version_autocxx_wrapper_0x9a467600c97d87d4(
                            autocxx_gen_this as *const Result
                                as *const ::cxx::core::ffi::c_void,
                        ),
                    )
                }
            }
            pub unsafe fn ZXing_Result_new_autocxx_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut Result,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_Result_new_autocxx_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_Result_new_autocxx_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ZXing_Result_new_autocxx_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                    )
                }
            }
            pub unsafe fn ZXing_Result_new1_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut Result,
                text: &::cxx::CxxString,
                y: c_int,
                xStart: c_int,
                xStop: c_int,
                format: BarcodeFormat,
                si: *mut SymbologyIdentifier,
                error: *mut Error,
                readerInit: bool,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_Result_new1_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_Result_new1_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        text: &::cxx::CxxString,
                        y: *mut c_int,
                        xStart: *mut c_int,
                        xStop: *mut c_int,
                        format: *mut BarcodeFormat,
                        si: *mut ::cxx::core::ffi::c_void,
                        error: *mut ::cxx::core::ffi::c_void,
                        readerInit: bool,
                    );
                }
                unsafe {
                    let mut y = ::cxx::core::mem::MaybeUninit::new(y);
                    let mut xStart = ::cxx::core::mem::MaybeUninit::new(xStart);
                    let mut xStop = ::cxx::core::mem::MaybeUninit::new(xStop);
                    let mut format = ::cxx::core::mem::MaybeUninit::new(format);
                    __ZXing_Result_new1_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        text,
                        y.as_mut_ptr(),
                        xStart.as_mut_ptr(),
                        xStop.as_mut_ptr(),
                        format.as_mut_ptr(),
                        si.cast(),
                        error.cast(),
                        readerInit,
                    )
                }
            }
            pub unsafe fn ZXing_Result_new2_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut Result,
                decodeResult: *mut DecoderResult,
                position: *mut QuadrilateralI,
                format: BarcodeFormat,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_Result_new2_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_Result_new2_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        decodeResult: *mut DecoderResult,
                        position: *mut QuadrilateralI,
                        format: *mut BarcodeFormat,
                    );
                }
                unsafe {
                    let mut format = ::cxx::core::mem::MaybeUninit::new(format);
                    __ZXing_Result_new2_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        decodeResult,
                        position,
                        format.as_mut_ptr(),
                    )
                }
            }
            /** Read barcode from an ImageView

 @param image  view of the image data including layout and format
 @param options  optional ReaderOptions to parameterize / speed up detection
 @return #Result structure*/
            pub unsafe fn ReadBarcode_autocxx_wrapper_0x9a467600c97d87d4(
                image: &ImageView,
                options: &ReaderOptions,
                placement_return_type: *mut Result,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ReadBarcode_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ReadBarcode_autocxx_wrapper_0x9a467600c97d87d4(
                        image: *const ::cxx::core::ffi::c_void,
                        options: *const ::cxx::core::ffi::c_void,
                        placement_return_type: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ReadBarcode_autocxx_wrapper_0x9a467600c97d87d4(
                        image as *const ImageView as *const ::cxx::core::ffi::c_void,
                        options as *const ReaderOptions
                            as *const ::cxx::core::ffi::c_void,
                        placement_return_type.cast(),
                    )
                }
            }
            pub fn BarcodeFormatToString_autocxx_wrapper_0x9a467600c97d87d4(
                format: BarcodeFormat,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$BarcodeFormatToString_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __BarcodeFormatToString_autocxx_wrapper_0x9a467600c97d87d4(
                        format: *mut BarcodeFormat,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    let mut format = ::cxx::core::mem::MaybeUninit::new(format);
                    ::cxx::UniquePtr::from_raw(
                        __BarcodeFormatToString_autocxx_wrapper_0x9a467600c97d87d4(
                            format.as_mut_ptr(),
                        ),
                    )
                }
            }
            pub fn ContentTypeToString_autocxx_wrapper_0x9a467600c97d87d4(
                ty: ContentType,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$ContentTypeToString_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ContentTypeToString_autocxx_wrapper_0x9a467600c97d87d4(
                        ty: *mut ContentType,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    let mut ty = ::cxx::core::mem::MaybeUninit::new(ty);
                    ::cxx::UniquePtr::from_raw(
                        __ContentTypeToString_autocxx_wrapper_0x9a467600c97d87d4(
                            ty.as_mut_ptr(),
                        ),
                    )
                }
            }
            pub fn ErrorToString_autocxx_wrapper_0x9a467600c97d87d4(
                e: &Error,
            ) -> ::cxx::UniquePtr<::cxx::CxxString> {
                extern "C" {
                    #[link_name = "cxxbridge1$ErrorToString_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ErrorToString_autocxx_wrapper_0x9a467600c97d87d4(
                        e: *const ::cxx::core::ffi::c_void,
                    ) -> *mut ::cxx::CxxString;
                }
                unsafe {
                    ::cxx::UniquePtr::from_raw(
                        __ErrorToString_autocxx_wrapper_0x9a467600c97d87d4(
                            e as *const Error as *const ::cxx::core::ffi::c_void,
                        ),
                    )
                }
            }
            pub fn ByteArrayAsVec<'a>(ba: &'a ByteArray) -> &'a ::cxx::CxxVector<u8> {
                extern "C" {
                    #[link_name = "ZXing$cxxbridge1$ByteArrayAsVec"]
                    fn __ByteArrayAsVec<'a>(
                        ba: *const ::cxx::core::ffi::c_void,
                    ) -> &'a ::cxx::CxxVector<u8>;
                }
                unsafe {
                    __ByteArrayAsVec(
                        ba as *const ByteArray as *const ::cxx::core::ffi::c_void,
                    )
                }
            }
            ///Synthesized move constructor.
            pub unsafe fn ZXing_ImageView_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut ImageView,
                other: *mut ImageView,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_ImageView_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_ImageView_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        other: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ZXing_ImageView_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        other.cast(),
                    )
                }
            }
            ///Synthesized copy constructor.
            pub unsafe fn ZXing_ImageView_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut ImageView,
                other: &ImageView,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_ImageView_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_ImageView_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        other: *const ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ZXing_ImageView_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        other as *const ImageView as *const ::cxx::core::ffi::c_void,
                    )
                }
            }
            ///Synthesized destructor.
            pub unsafe fn ImageView_synthetic_destructor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut ImageView,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ImageView_synthetic_destructor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ImageView_synthetic_destructor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ImageView_synthetic_destructor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                    )
                }
            }
            ///Synthesized destructor.
            pub unsafe fn Result_synthetic_destructor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut Result,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$Result_synthetic_destructor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __Result_synthetic_destructor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __Result_synthetic_destructor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                    )
                }
            }
            #[repr(C)]
            pub struct ZXing_PointT_int_AutocxxConcrete {
                _private: ::cxx::private::Opaque,
            }
            unsafe impl ::cxx::ExternType for ZXing_PointT_int_AutocxxConcrete {
                #[allow(unused_attributes)]
                #[doc(hidden)]
                type Id = (
                    ::cxx::Z,
                    ::cxx::X,
                    ::cxx::i,
                    ::cxx::n,
                    ::cxx::g,
                    ::cxx::__,
                    ::cxx::P,
                    ::cxx::o,
                    ::cxx::i,
                    ::cxx::n,
                    ::cxx::t,
                    ::cxx::T,
                    ::cxx::__,
                    ::cxx::i,
                    ::cxx::n,
                    ::cxx::t,
                    ::cxx::__,
                    ::cxx::A,
                    ::cxx::u,
                    ::cxx::t,
                    ::cxx::o,
                    ::cxx::c,
                    ::cxx::x,
                    ::cxx::x,
                    ::cxx::C,
                    ::cxx::o,
                    ::cxx::n,
                    ::cxx::c,
                    ::cxx::r,
                    ::cxx::e,
                    ::cxx::t,
                    ::cxx::e,
                );
                type Kind = ::cxx::kind::Opaque;
            }
            pub type ImageFormat = super::bindgen::root::ZXing::ImageFormat;
            /// Enumerates barcode formats known to this package.
            pub type BarcodeFormat = super::bindgen::root::ZXing::BarcodeFormat;
            pub type Error = super::bindgen::root::ZXing::Error;
            ///ByteArray is an extension of std::vector<unsigned char>.
            pub type ByteArray = super::bindgen::root::ZXing::ByteArray;
            pub type TextMode = super::bindgen::root::ZXing::TextMode;
            pub type ContentType = super::bindgen::root::ZXing::ContentType;
            #[repr(C)]
            pub struct QuadrilateralI {
                _private: ::cxx::private::Opaque,
            }
            unsafe impl ::cxx::ExternType for QuadrilateralI {
                #[allow(unused_attributes)]
                #[doc(hidden)]
                type Id = (
                    ::cxx::Z,
                    ::cxx::X,
                    ::cxx::i,
                    ::cxx::n,
                    ::cxx::g,
                    (),
                    ::cxx::Q,
                    ::cxx::u,
                    ::cxx::a,
                    ::cxx::d,
                    ::cxx::r,
                    ::cxx::i,
                    ::cxx::l,
                    ::cxx::a,
                    ::cxx::t,
                    ::cxx::e,
                    ::cxx::r,
                    ::cxx::a,
                    ::cxx::l,
                    ::cxx::I,
                );
                type Kind = ::cxx::kind::Opaque;
            }
            pub type SymbologyIdentifier = super::bindgen::root::ZXing::SymbologyIdentifier;
            #[repr(C)]
            pub struct DecoderResult {
                _private: ::cxx::private::Opaque,
            }
            unsafe impl ::cxx::ExternType for DecoderResult {
                #[allow(unused_attributes)]
                #[doc(hidden)]
                type Id = (
                    ::cxx::Z,
                    ::cxx::X,
                    ::cxx::i,
                    ::cxx::n,
                    ::cxx::g,
                    (),
                    ::cxx::D,
                    ::cxx::e,
                    ::cxx::c,
                    ::cxx::o,
                    ::cxx::d,
                    ::cxx::e,
                    ::cxx::r,
                    ::cxx::R,
                    ::cxx::e,
                    ::cxx::s,
                    ::cxx::u,
                    ::cxx::l,
                    ::cxx::t,
                );
                type Kind = ::cxx::kind::Opaque;
            }
            pub type ReaderOptions = super::bindgen::root::ZXing::ReaderOptions;
            pub unsafe fn Error_alloc_autocxx_wrapper_0x9a467600c97d87d4() -> *mut Error {
                extern "C" {
                    #[link_name = "cxxbridge1$Error_alloc_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __Error_alloc_autocxx_wrapper_0x9a467600c97d87d4() -> *mut ::cxx::core::ffi::c_void;
                }
                unsafe { __Error_alloc_autocxx_wrapper_0x9a467600c97d87d4().cast() }
            }
            pub unsafe fn Error_free_autocxx_wrapper_0x9a467600c97d87d4(
                arg0: *mut Error,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$Error_free_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __Error_free_autocxx_wrapper_0x9a467600c97d87d4(
                        arg0: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe { __Error_free_autocxx_wrapper_0x9a467600c97d87d4(arg0.cast()) }
            }
            ///Synthesized move constructor.
            pub unsafe fn ZXing_Error_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut Error,
                other: *mut Error,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_Error_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_Error_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        other: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ZXing_Error_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        other.cast(),
                    )
                }
            }
            ///Synthesized copy constructor.
            pub unsafe fn ZXing_Error_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut Error,
                other: &Error,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_Error_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_Error_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        other: *const ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ZXing_Error_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        other as *const Error as *const ::cxx::core::ffi::c_void,
                    )
                }
            }
            pub unsafe fn ByteArray_alloc_autocxx_wrapper_0x9a467600c97d87d4() -> *mut ByteArray {
                extern "C" {
                    #[link_name = "cxxbridge1$ByteArray_alloc_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ByteArray_alloc_autocxx_wrapper_0x9a467600c97d87d4() -> *mut ::cxx::core::ffi::c_void;
                }
                unsafe { __ByteArray_alloc_autocxx_wrapper_0x9a467600c97d87d4().cast() }
            }
            pub unsafe fn ByteArray_free_autocxx_wrapper_0x9a467600c97d87d4(
                arg0: *mut ByteArray,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ByteArray_free_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ByteArray_free_autocxx_wrapper_0x9a467600c97d87d4(
                        arg0: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ByteArray_free_autocxx_wrapper_0x9a467600c97d87d4(arg0.cast())
                }
            }
            ///Synthesized move constructor.
            pub unsafe fn ZXing_ByteArray_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut ByteArray,
                other: *mut ByteArray,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_ByteArray_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_ByteArray_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        other: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ZXing_ByteArray_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        other.cast(),
                    )
                }
            }
            ///Synthesized copy constructor.
            pub unsafe fn ZXing_ByteArray_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut ByteArray,
                other: &ByteArray,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_ByteArray_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_ByteArray_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        other: *const ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ZXing_ByteArray_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        other as *const ByteArray as *const ::cxx::core::ffi::c_void,
                    )
                }
            }
            pub unsafe fn SymbologyIdentifier_alloc_autocxx_wrapper_0x9a467600c97d87d4() -> *mut SymbologyIdentifier {
                extern "C" {
                    #[link_name = "cxxbridge1$SymbologyIdentifier_alloc_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __SymbologyIdentifier_alloc_autocxx_wrapper_0x9a467600c97d87d4() -> *mut ::cxx::core::ffi::c_void;
                }
                unsafe {
                    __SymbologyIdentifier_alloc_autocxx_wrapper_0x9a467600c97d87d4()
                        .cast()
                }
            }
            pub unsafe fn SymbologyIdentifier_free_autocxx_wrapper_0x9a467600c97d87d4(
                arg0: *mut SymbologyIdentifier,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$SymbologyIdentifier_free_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __SymbologyIdentifier_free_autocxx_wrapper_0x9a467600c97d87d4(
                        arg0: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __SymbologyIdentifier_free_autocxx_wrapper_0x9a467600c97d87d4(
                        arg0.cast(),
                    )
                }
            }
            ///Synthesized move constructor.
            pub unsafe fn ZXing_SymbologyIdentifier_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut SymbologyIdentifier,
                other: *mut SymbologyIdentifier,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_SymbologyIdentifier_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_SymbologyIdentifier_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        other: *mut ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ZXing_SymbologyIdentifier_new_synthetic_move_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        other.cast(),
                    )
                }
            }
            ///Synthesized copy constructor.
            pub unsafe fn ZXing_SymbologyIdentifier_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                autocxx_gen_this: *mut SymbologyIdentifier,
                other: &SymbologyIdentifier,
            ) {
                extern "C" {
                    #[link_name = "cxxbridge1$ZXing_SymbologyIdentifier_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4"]
                    fn __ZXing_SymbologyIdentifier_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this: *mut ::cxx::core::ffi::c_void,
                        other: *const ::cxx::core::ffi::c_void,
                    );
                }
                unsafe {
                    __ZXing_SymbologyIdentifier_new_synthetic_const_copy_ctor_0x9a467600c97d87d4_autocxx_wrapper_0x9a467600c97d87d4(
                        autocxx_gen_this.cast(),
                        other as *const SymbologyIdentifier
                            as *const ::cxx::core::ffi::c_void,
                    )
                }
            }
            pub type c_int = autocxx::c_int;
            unsafe impl ::cxx::private::UniquePtrTarget for ImageView {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ImageView")
                }
                fn __null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageView$null"]
                        fn __null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __null(&mut repr);
                    }
                    repr
                }
                fn __new(
                    value: Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageView$uninit"]
                        fn __uninit(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __uninit(&mut repr).cast::<ImageView>().write(value);
                    }
                    repr
                }
                unsafe fn __raw(
                    raw: *mut Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageView$raw"]
                        fn __raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __raw(&mut repr, raw.cast());
                    }
                    repr
                }
                unsafe fn __get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageView$get"]
                        fn __get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(&repr).cast() }
                }
                unsafe fn __release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageView$release"]
                        fn __release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __release(&mut repr).cast() }
                }
                unsafe fn __drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageView$drop"]
                        fn __drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::SharedPtrTarget for ImageView {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ImageView")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ImageView$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __new(value: Self, new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ImageView$uninit"]
                        fn __uninit(
                            new: *mut ::cxx::core::ffi::c_void,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe {
                        __uninit(new).cast::<ImageView>().write(value);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ImageView$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __get(this: *const ::cxx::core::ffi::c_void) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ImageView$get"]
                        fn __get(
                            this: *const ::cxx::core::ffi::c_void,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(this).cast() }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ImageView$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::WeakPtrTarget for ImageView {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ImageView")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ImageView$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ImageView$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __downgrade(
                    shared: *const ::cxx::core::ffi::c_void,
                    weak: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ImageView$downgrade"]
                        fn __downgrade(
                            shared: *const ::cxx::core::ffi::c_void,
                            weak: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __downgrade(shared, weak);
                    }
                }
                unsafe fn __upgrade(
                    weak: *const ::cxx::core::ffi::c_void,
                    shared: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ImageView$upgrade"]
                        fn __upgrade(
                            weak: *const ::cxx::core::ffi::c_void,
                            shared: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __upgrade(weak, shared);
                    }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ImageView$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::VectorElement for ImageView {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ImageView")
                }
                fn __vector_new() -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ImageView$new"]
                        fn __vector_new() -> *mut ::cxx::CxxVector<ImageView>;
                    }
                    unsafe { __vector_new() }
                }
                fn __vector_size(v: &::cxx::CxxVector<Self>) -> usize {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ImageView$size"]
                        fn __vector_size(_: &::cxx::CxxVector<ImageView>) -> usize;
                    }
                    unsafe { __vector_size(v) }
                }
                unsafe fn __get_unchecked(
                    v: *mut ::cxx::CxxVector<Self>,
                    pos: usize,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ImageView$get_unchecked"]
                        fn __get_unchecked(
                            v: *mut ::cxx::CxxVector<ImageView>,
                            pos: usize,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get_unchecked(v, pos) as *mut Self }
                }
                unsafe fn __push_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    value: &mut ::cxx::core::mem::ManuallyDrop<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ImageView$push_back"]
                        fn __push_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<ImageView>,
                            >,
                            value: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __push_back(
                            this,
                            value as *mut ::cxx::core::mem::ManuallyDrop<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                unsafe fn __pop_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    out: &mut ::cxx::core::mem::MaybeUninit<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ImageView$pop_back"]
                        fn __pop_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<ImageView>,
                            >,
                            out: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __pop_back(
                            this,
                            out as *mut ::cxx::core::mem::MaybeUninit<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                fn __unique_ptr_null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ImageView$null"]
                        fn __unique_ptr_null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_null(&mut repr);
                    }
                    repr
                }
                unsafe fn __unique_ptr_raw(
                    raw: *mut ::cxx::CxxVector<Self>,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ImageView$raw"]
                        fn __unique_ptr_raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::CxxVector<ImageView>,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_raw(&mut repr, raw);
                    }
                    repr
                }
                unsafe fn __unique_ptr_get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ImageView$get"]
                        fn __unique_ptr_get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::CxxVector<ImageView>;
                    }
                    unsafe { __unique_ptr_get(&repr) }
                }
                unsafe fn __unique_ptr_release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ImageView$release"]
                        fn __unique_ptr_release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::CxxVector<ImageView>;
                    }
                    unsafe { __unique_ptr_release(&mut repr) }
                }
                unsafe fn __unique_ptr_drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ImageView$drop"]
                        fn __unique_ptr_drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __unique_ptr_drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::UniquePtrTarget for Result {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("Result")
                }
                fn __null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Result$null"]
                        fn __null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __null(&mut repr);
                    }
                    repr
                }
                fn __new(
                    value: Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Result$uninit"]
                        fn __uninit(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __uninit(&mut repr).cast::<Result>().write(value);
                    }
                    repr
                }
                unsafe fn __raw(
                    raw: *mut Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Result$raw"]
                        fn __raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __raw(&mut repr, raw.cast());
                    }
                    repr
                }
                unsafe fn __get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Result$get"]
                        fn __get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(&repr).cast() }
                }
                unsafe fn __release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Result$release"]
                        fn __release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __release(&mut repr).cast() }
                }
                unsafe fn __drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Result$drop"]
                        fn __drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::SharedPtrTarget for Result {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("Result")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$Result$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __new(value: Self, new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$Result$uninit"]
                        fn __uninit(
                            new: *mut ::cxx::core::ffi::c_void,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe {
                        __uninit(new).cast::<Result>().write(value);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$Result$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __get(this: *const ::cxx::core::ffi::c_void) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$Result$get"]
                        fn __get(
                            this: *const ::cxx::core::ffi::c_void,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(this).cast() }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$Result$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::WeakPtrTarget for Result {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("Result")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$Result$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$Result$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __downgrade(
                    shared: *const ::cxx::core::ffi::c_void,
                    weak: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$Result$downgrade"]
                        fn __downgrade(
                            shared: *const ::cxx::core::ffi::c_void,
                            weak: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __downgrade(shared, weak);
                    }
                }
                unsafe fn __upgrade(
                    weak: *const ::cxx::core::ffi::c_void,
                    shared: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$Result$upgrade"]
                        fn __upgrade(
                            weak: *const ::cxx::core::ffi::c_void,
                            shared: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __upgrade(weak, shared);
                    }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$Result$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::UniquePtrTarget
            for ZXing_PointT_int_AutocxxConcrete {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ZXing_PointT_int_AutocxxConcrete")
                }
                fn __null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing_PointT_int_AutocxxConcrete$null"]
                        fn __null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __null(&mut repr);
                    }
                    repr
                }
                unsafe fn __raw(
                    raw: *mut Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing_PointT_int_AutocxxConcrete$raw"]
                        fn __raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __raw(&mut repr, raw.cast());
                    }
                    repr
                }
                unsafe fn __get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing_PointT_int_AutocxxConcrete$get"]
                        fn __get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(&repr).cast() }
                }
                unsafe fn __release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing_PointT_int_AutocxxConcrete$release"]
                        fn __release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __release(&mut repr).cast() }
                }
                unsafe fn __drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing_PointT_int_AutocxxConcrete$drop"]
                        fn __drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::SharedPtrTarget
            for ZXing_PointT_int_AutocxxConcrete {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ZXing_PointT_int_AutocxxConcrete")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing_PointT_int_AutocxxConcrete$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing_PointT_int_AutocxxConcrete$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __get(this: *const ::cxx::core::ffi::c_void) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing_PointT_int_AutocxxConcrete$get"]
                        fn __get(
                            this: *const ::cxx::core::ffi::c_void,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(this).cast() }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing_PointT_int_AutocxxConcrete$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::WeakPtrTarget
            for ZXing_PointT_int_AutocxxConcrete {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ZXing_PointT_int_AutocxxConcrete")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing_PointT_int_AutocxxConcrete$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing_PointT_int_AutocxxConcrete$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __downgrade(
                    shared: *const ::cxx::core::ffi::c_void,
                    weak: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing_PointT_int_AutocxxConcrete$downgrade"]
                        fn __downgrade(
                            shared: *const ::cxx::core::ffi::c_void,
                            weak: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __downgrade(shared, weak);
                    }
                }
                unsafe fn __upgrade(
                    weak: *const ::cxx::core::ffi::c_void,
                    shared: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing_PointT_int_AutocxxConcrete$upgrade"]
                        fn __upgrade(
                            weak: *const ::cxx::core::ffi::c_void,
                            shared: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __upgrade(weak, shared);
                    }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing_PointT_int_AutocxxConcrete$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::UniquePtrTarget for ImageFormat {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ImageFormat")
                }
                fn __null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageFormat$null"]
                        fn __null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __null(&mut repr);
                    }
                    repr
                }
                fn __new(
                    value: Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageFormat$uninit"]
                        fn __uninit(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __uninit(&mut repr).cast::<ImageFormat>().write(value);
                    }
                    repr
                }
                unsafe fn __raw(
                    raw: *mut Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageFormat$raw"]
                        fn __raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __raw(&mut repr, raw.cast());
                    }
                    repr
                }
                unsafe fn __get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageFormat$get"]
                        fn __get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(&repr).cast() }
                }
                unsafe fn __release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageFormat$release"]
                        fn __release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __release(&mut repr).cast() }
                }
                unsafe fn __drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ImageFormat$drop"]
                        fn __drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::SharedPtrTarget for ImageFormat {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ImageFormat")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ImageFormat$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __new(value: Self, new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ImageFormat$uninit"]
                        fn __uninit(
                            new: *mut ::cxx::core::ffi::c_void,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe {
                        __uninit(new).cast::<ImageFormat>().write(value);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ImageFormat$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __get(this: *const ::cxx::core::ffi::c_void) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ImageFormat$get"]
                        fn __get(
                            this: *const ::cxx::core::ffi::c_void,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(this).cast() }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ImageFormat$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::WeakPtrTarget for ImageFormat {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ImageFormat")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ImageFormat$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ImageFormat$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __downgrade(
                    shared: *const ::cxx::core::ffi::c_void,
                    weak: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ImageFormat$downgrade"]
                        fn __downgrade(
                            shared: *const ::cxx::core::ffi::c_void,
                            weak: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __downgrade(shared, weak);
                    }
                }
                unsafe fn __upgrade(
                    weak: *const ::cxx::core::ffi::c_void,
                    shared: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ImageFormat$upgrade"]
                        fn __upgrade(
                            weak: *const ::cxx::core::ffi::c_void,
                            shared: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __upgrade(weak, shared);
                    }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ImageFormat$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::VectorElement for ImageFormat {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ImageFormat")
                }
                fn __vector_new() -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ImageFormat$new"]
                        fn __vector_new() -> *mut ::cxx::CxxVector<ImageFormat>;
                    }
                    unsafe { __vector_new() }
                }
                fn __vector_size(v: &::cxx::CxxVector<Self>) -> usize {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ImageFormat$size"]
                        fn __vector_size(_: &::cxx::CxxVector<ImageFormat>) -> usize;
                    }
                    unsafe { __vector_size(v) }
                }
                unsafe fn __get_unchecked(
                    v: *mut ::cxx::CxxVector<Self>,
                    pos: usize,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ImageFormat$get_unchecked"]
                        fn __get_unchecked(
                            v: *mut ::cxx::CxxVector<ImageFormat>,
                            pos: usize,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get_unchecked(v, pos) as *mut Self }
                }
                unsafe fn __push_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    value: &mut ::cxx::core::mem::ManuallyDrop<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ImageFormat$push_back"]
                        fn __push_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<ImageFormat>,
                            >,
                            value: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __push_back(
                            this,
                            value as *mut ::cxx::core::mem::ManuallyDrop<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                unsafe fn __pop_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    out: &mut ::cxx::core::mem::MaybeUninit<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ImageFormat$pop_back"]
                        fn __pop_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<ImageFormat>,
                            >,
                            out: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __pop_back(
                            this,
                            out as *mut ::cxx::core::mem::MaybeUninit<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                fn __unique_ptr_null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ImageFormat$null"]
                        fn __unique_ptr_null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_null(&mut repr);
                    }
                    repr
                }
                unsafe fn __unique_ptr_raw(
                    raw: *mut ::cxx::CxxVector<Self>,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ImageFormat$raw"]
                        fn __unique_ptr_raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::CxxVector<ImageFormat>,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_raw(&mut repr, raw);
                    }
                    repr
                }
                unsafe fn __unique_ptr_get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ImageFormat$get"]
                        fn __unique_ptr_get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::CxxVector<ImageFormat>;
                    }
                    unsafe { __unique_ptr_get(&repr) }
                }
                unsafe fn __unique_ptr_release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ImageFormat$release"]
                        fn __unique_ptr_release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::CxxVector<ImageFormat>;
                    }
                    unsafe { __unique_ptr_release(&mut repr) }
                }
                unsafe fn __unique_ptr_drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ImageFormat$drop"]
                        fn __unique_ptr_drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __unique_ptr_drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::UniquePtrTarget for BarcodeFormat {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("BarcodeFormat")
                }
                fn __null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$BarcodeFormat$null"]
                        fn __null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __null(&mut repr);
                    }
                    repr
                }
                fn __new(
                    value: Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$BarcodeFormat$uninit"]
                        fn __uninit(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __uninit(&mut repr).cast::<BarcodeFormat>().write(value);
                    }
                    repr
                }
                unsafe fn __raw(
                    raw: *mut Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$BarcodeFormat$raw"]
                        fn __raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __raw(&mut repr, raw.cast());
                    }
                    repr
                }
                unsafe fn __get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$BarcodeFormat$get"]
                        fn __get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(&repr).cast() }
                }
                unsafe fn __release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$BarcodeFormat$release"]
                        fn __release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __release(&mut repr).cast() }
                }
                unsafe fn __drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$BarcodeFormat$drop"]
                        fn __drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::SharedPtrTarget for BarcodeFormat {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("BarcodeFormat")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$BarcodeFormat$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __new(value: Self, new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$BarcodeFormat$uninit"]
                        fn __uninit(
                            new: *mut ::cxx::core::ffi::c_void,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe {
                        __uninit(new).cast::<BarcodeFormat>().write(value);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$BarcodeFormat$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __get(this: *const ::cxx::core::ffi::c_void) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$BarcodeFormat$get"]
                        fn __get(
                            this: *const ::cxx::core::ffi::c_void,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(this).cast() }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$BarcodeFormat$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::WeakPtrTarget for BarcodeFormat {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("BarcodeFormat")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$BarcodeFormat$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$BarcodeFormat$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __downgrade(
                    shared: *const ::cxx::core::ffi::c_void,
                    weak: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$BarcodeFormat$downgrade"]
                        fn __downgrade(
                            shared: *const ::cxx::core::ffi::c_void,
                            weak: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __downgrade(shared, weak);
                    }
                }
                unsafe fn __upgrade(
                    weak: *const ::cxx::core::ffi::c_void,
                    shared: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$BarcodeFormat$upgrade"]
                        fn __upgrade(
                            weak: *const ::cxx::core::ffi::c_void,
                            shared: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __upgrade(weak, shared);
                    }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$BarcodeFormat$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::VectorElement for BarcodeFormat {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("BarcodeFormat")
                }
                fn __vector_new() -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$BarcodeFormat$new"]
                        fn __vector_new() -> *mut ::cxx::CxxVector<BarcodeFormat>;
                    }
                    unsafe { __vector_new() }
                }
                fn __vector_size(v: &::cxx::CxxVector<Self>) -> usize {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$BarcodeFormat$size"]
                        fn __vector_size(_: &::cxx::CxxVector<BarcodeFormat>) -> usize;
                    }
                    unsafe { __vector_size(v) }
                }
                unsafe fn __get_unchecked(
                    v: *mut ::cxx::CxxVector<Self>,
                    pos: usize,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$BarcodeFormat$get_unchecked"]
                        fn __get_unchecked(
                            v: *mut ::cxx::CxxVector<BarcodeFormat>,
                            pos: usize,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get_unchecked(v, pos) as *mut Self }
                }
                unsafe fn __push_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    value: &mut ::cxx::core::mem::ManuallyDrop<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$BarcodeFormat$push_back"]
                        fn __push_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<BarcodeFormat>,
                            >,
                            value: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __push_back(
                            this,
                            value as *mut ::cxx::core::mem::ManuallyDrop<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                unsafe fn __pop_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    out: &mut ::cxx::core::mem::MaybeUninit<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$BarcodeFormat$pop_back"]
                        fn __pop_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<BarcodeFormat>,
                            >,
                            out: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __pop_back(
                            this,
                            out as *mut ::cxx::core::mem::MaybeUninit<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                fn __unique_ptr_null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$BarcodeFormat$null"]
                        fn __unique_ptr_null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_null(&mut repr);
                    }
                    repr
                }
                unsafe fn __unique_ptr_raw(
                    raw: *mut ::cxx::CxxVector<Self>,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$BarcodeFormat$raw"]
                        fn __unique_ptr_raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::CxxVector<BarcodeFormat>,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_raw(&mut repr, raw);
                    }
                    repr
                }
                unsafe fn __unique_ptr_get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$BarcodeFormat$get"]
                        fn __unique_ptr_get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::CxxVector<BarcodeFormat>;
                    }
                    unsafe { __unique_ptr_get(&repr) }
                }
                unsafe fn __unique_ptr_release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$BarcodeFormat$release"]
                        fn __unique_ptr_release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::CxxVector<BarcodeFormat>;
                    }
                    unsafe { __unique_ptr_release(&mut repr) }
                }
                unsafe fn __unique_ptr_drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$BarcodeFormat$drop"]
                        fn __unique_ptr_drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __unique_ptr_drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::UniquePtrTarget for Error {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("Error")
                }
                fn __null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Error$null"]
                        fn __null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __null(&mut repr);
                    }
                    repr
                }
                fn __new(
                    value: Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Error$uninit"]
                        fn __uninit(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __uninit(&mut repr).cast::<Error>().write(value);
                    }
                    repr
                }
                unsafe fn __raw(
                    raw: *mut Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Error$raw"]
                        fn __raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __raw(&mut repr, raw.cast());
                    }
                    repr
                }
                unsafe fn __get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Error$get"]
                        fn __get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(&repr).cast() }
                }
                unsafe fn __release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Error$release"]
                        fn __release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __release(&mut repr).cast() }
                }
                unsafe fn __drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$Error$drop"]
                        fn __drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::SharedPtrTarget for Error {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("Error")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$Error$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __new(value: Self, new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$Error$uninit"]
                        fn __uninit(
                            new: *mut ::cxx::core::ffi::c_void,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe {
                        __uninit(new).cast::<Error>().write(value);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$Error$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __get(this: *const ::cxx::core::ffi::c_void) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$Error$get"]
                        fn __get(
                            this: *const ::cxx::core::ffi::c_void,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(this).cast() }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$Error$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::WeakPtrTarget for Error {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("Error")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$Error$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$Error$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __downgrade(
                    shared: *const ::cxx::core::ffi::c_void,
                    weak: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$Error$downgrade"]
                        fn __downgrade(
                            shared: *const ::cxx::core::ffi::c_void,
                            weak: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __downgrade(shared, weak);
                    }
                }
                unsafe fn __upgrade(
                    weak: *const ::cxx::core::ffi::c_void,
                    shared: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$Error$upgrade"]
                        fn __upgrade(
                            weak: *const ::cxx::core::ffi::c_void,
                            shared: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __upgrade(weak, shared);
                    }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$Error$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::VectorElement for Error {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("Error")
                }
                fn __vector_new() -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$Error$new"]
                        fn __vector_new() -> *mut ::cxx::CxxVector<Error>;
                    }
                    unsafe { __vector_new() }
                }
                fn __vector_size(v: &::cxx::CxxVector<Self>) -> usize {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$Error$size"]
                        fn __vector_size(_: &::cxx::CxxVector<Error>) -> usize;
                    }
                    unsafe { __vector_size(v) }
                }
                unsafe fn __get_unchecked(
                    v: *mut ::cxx::CxxVector<Self>,
                    pos: usize,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$Error$get_unchecked"]
                        fn __get_unchecked(
                            v: *mut ::cxx::CxxVector<Error>,
                            pos: usize,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get_unchecked(v, pos) as *mut Self }
                }
                unsafe fn __push_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    value: &mut ::cxx::core::mem::ManuallyDrop<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$Error$push_back"]
                        fn __push_back(
                            this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Error>>,
                            value: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __push_back(
                            this,
                            value as *mut ::cxx::core::mem::ManuallyDrop<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                unsafe fn __pop_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    out: &mut ::cxx::core::mem::MaybeUninit<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$Error$pop_back"]
                        fn __pop_back(
                            this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Error>>,
                            out: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __pop_back(
                            this,
                            out as *mut ::cxx::core::mem::MaybeUninit<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                fn __unique_ptr_null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$Error$null"]
                        fn __unique_ptr_null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_null(&mut repr);
                    }
                    repr
                }
                unsafe fn __unique_ptr_raw(
                    raw: *mut ::cxx::CxxVector<Self>,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$Error$raw"]
                        fn __unique_ptr_raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::CxxVector<Error>,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_raw(&mut repr, raw);
                    }
                    repr
                }
                unsafe fn __unique_ptr_get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$Error$get"]
                        fn __unique_ptr_get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::CxxVector<Error>;
                    }
                    unsafe { __unique_ptr_get(&repr) }
                }
                unsafe fn __unique_ptr_release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$Error$release"]
                        fn __unique_ptr_release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::CxxVector<Error>;
                    }
                    unsafe { __unique_ptr_release(&mut repr) }
                }
                unsafe fn __unique_ptr_drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$Error$drop"]
                        fn __unique_ptr_drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __unique_ptr_drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::UniquePtrTarget for ByteArray {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ByteArray")
                }
                fn __null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ByteArray$null"]
                        fn __null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __null(&mut repr);
                    }
                    repr
                }
                fn __new(
                    value: Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ByteArray$uninit"]
                        fn __uninit(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __uninit(&mut repr).cast::<ByteArray>().write(value);
                    }
                    repr
                }
                unsafe fn __raw(
                    raw: *mut Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ByteArray$raw"]
                        fn __raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __raw(&mut repr, raw.cast());
                    }
                    repr
                }
                unsafe fn __get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ByteArray$get"]
                        fn __get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(&repr).cast() }
                }
                unsafe fn __release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ByteArray$release"]
                        fn __release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __release(&mut repr).cast() }
                }
                unsafe fn __drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ByteArray$drop"]
                        fn __drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::SharedPtrTarget for ByteArray {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ByteArray")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ByteArray$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __new(value: Self, new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ByteArray$uninit"]
                        fn __uninit(
                            new: *mut ::cxx::core::ffi::c_void,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe {
                        __uninit(new).cast::<ByteArray>().write(value);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ByteArray$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __get(this: *const ::cxx::core::ffi::c_void) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ByteArray$get"]
                        fn __get(
                            this: *const ::cxx::core::ffi::c_void,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(this).cast() }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ByteArray$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::WeakPtrTarget for ByteArray {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ByteArray")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ByteArray$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ByteArray$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __downgrade(
                    shared: *const ::cxx::core::ffi::c_void,
                    weak: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ByteArray$downgrade"]
                        fn __downgrade(
                            shared: *const ::cxx::core::ffi::c_void,
                            weak: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __downgrade(shared, weak);
                    }
                }
                unsafe fn __upgrade(
                    weak: *const ::cxx::core::ffi::c_void,
                    shared: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ByteArray$upgrade"]
                        fn __upgrade(
                            weak: *const ::cxx::core::ffi::c_void,
                            shared: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __upgrade(weak, shared);
                    }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ByteArray$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::VectorElement for ByteArray {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ByteArray")
                }
                fn __vector_new() -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ByteArray$new"]
                        fn __vector_new() -> *mut ::cxx::CxxVector<ByteArray>;
                    }
                    unsafe { __vector_new() }
                }
                fn __vector_size(v: &::cxx::CxxVector<Self>) -> usize {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ByteArray$size"]
                        fn __vector_size(_: &::cxx::CxxVector<ByteArray>) -> usize;
                    }
                    unsafe { __vector_size(v) }
                }
                unsafe fn __get_unchecked(
                    v: *mut ::cxx::CxxVector<Self>,
                    pos: usize,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ByteArray$get_unchecked"]
                        fn __get_unchecked(
                            v: *mut ::cxx::CxxVector<ByteArray>,
                            pos: usize,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get_unchecked(v, pos) as *mut Self }
                }
                unsafe fn __push_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    value: &mut ::cxx::core::mem::ManuallyDrop<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ByteArray$push_back"]
                        fn __push_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<ByteArray>,
                            >,
                            value: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __push_back(
                            this,
                            value as *mut ::cxx::core::mem::ManuallyDrop<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                unsafe fn __pop_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    out: &mut ::cxx::core::mem::MaybeUninit<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ByteArray$pop_back"]
                        fn __pop_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<ByteArray>,
                            >,
                            out: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __pop_back(
                            this,
                            out as *mut ::cxx::core::mem::MaybeUninit<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                fn __unique_ptr_null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ByteArray$null"]
                        fn __unique_ptr_null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_null(&mut repr);
                    }
                    repr
                }
                unsafe fn __unique_ptr_raw(
                    raw: *mut ::cxx::CxxVector<Self>,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ByteArray$raw"]
                        fn __unique_ptr_raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::CxxVector<ByteArray>,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_raw(&mut repr, raw);
                    }
                    repr
                }
                unsafe fn __unique_ptr_get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ByteArray$get"]
                        fn __unique_ptr_get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::CxxVector<ByteArray>;
                    }
                    unsafe { __unique_ptr_get(&repr) }
                }
                unsafe fn __unique_ptr_release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ByteArray$release"]
                        fn __unique_ptr_release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::CxxVector<ByteArray>;
                    }
                    unsafe { __unique_ptr_release(&mut repr) }
                }
                unsafe fn __unique_ptr_drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ByteArray$drop"]
                        fn __unique_ptr_drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __unique_ptr_drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::UniquePtrTarget for ContentType {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ContentType")
                }
                fn __null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ContentType$null"]
                        fn __null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __null(&mut repr);
                    }
                    repr
                }
                fn __new(
                    value: Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ContentType$uninit"]
                        fn __uninit(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __uninit(&mut repr).cast::<ContentType>().write(value);
                    }
                    repr
                }
                unsafe fn __raw(
                    raw: *mut Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ContentType$raw"]
                        fn __raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __raw(&mut repr, raw.cast());
                    }
                    repr
                }
                unsafe fn __get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ContentType$get"]
                        fn __get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(&repr).cast() }
                }
                unsafe fn __release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ContentType$release"]
                        fn __release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __release(&mut repr).cast() }
                }
                unsafe fn __drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$ContentType$drop"]
                        fn __drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::SharedPtrTarget for ContentType {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ContentType")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ContentType$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __new(value: Self, new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ContentType$uninit"]
                        fn __uninit(
                            new: *mut ::cxx::core::ffi::c_void,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe {
                        __uninit(new).cast::<ContentType>().write(value);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ContentType$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __get(this: *const ::cxx::core::ffi::c_void) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ContentType$get"]
                        fn __get(
                            this: *const ::cxx::core::ffi::c_void,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(this).cast() }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$ContentType$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::WeakPtrTarget for ContentType {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ContentType")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ContentType$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ContentType$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __downgrade(
                    shared: *const ::cxx::core::ffi::c_void,
                    weak: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ContentType$downgrade"]
                        fn __downgrade(
                            shared: *const ::cxx::core::ffi::c_void,
                            weak: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __downgrade(shared, weak);
                    }
                }
                unsafe fn __upgrade(
                    weak: *const ::cxx::core::ffi::c_void,
                    shared: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ContentType$upgrade"]
                        fn __upgrade(
                            weak: *const ::cxx::core::ffi::c_void,
                            shared: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __upgrade(weak, shared);
                    }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$ContentType$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::VectorElement for ContentType {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("ContentType")
                }
                fn __vector_new() -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ContentType$new"]
                        fn __vector_new() -> *mut ::cxx::CxxVector<ContentType>;
                    }
                    unsafe { __vector_new() }
                }
                fn __vector_size(v: &::cxx::CxxVector<Self>) -> usize {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ContentType$size"]
                        fn __vector_size(_: &::cxx::CxxVector<ContentType>) -> usize;
                    }
                    unsafe { __vector_size(v) }
                }
                unsafe fn __get_unchecked(
                    v: *mut ::cxx::CxxVector<Self>,
                    pos: usize,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ContentType$get_unchecked"]
                        fn __get_unchecked(
                            v: *mut ::cxx::CxxVector<ContentType>,
                            pos: usize,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get_unchecked(v, pos) as *mut Self }
                }
                unsafe fn __push_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    value: &mut ::cxx::core::mem::ManuallyDrop<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ContentType$push_back"]
                        fn __push_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<ContentType>,
                            >,
                            value: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __push_back(
                            this,
                            value as *mut ::cxx::core::mem::ManuallyDrop<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                unsafe fn __pop_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    out: &mut ::cxx::core::mem::MaybeUninit<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$ContentType$pop_back"]
                        fn __pop_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<ContentType>,
                            >,
                            out: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __pop_back(
                            this,
                            out as *mut ::cxx::core::mem::MaybeUninit<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                fn __unique_ptr_null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ContentType$null"]
                        fn __unique_ptr_null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_null(&mut repr);
                    }
                    repr
                }
                unsafe fn __unique_ptr_raw(
                    raw: *mut ::cxx::CxxVector<Self>,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ContentType$raw"]
                        fn __unique_ptr_raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::CxxVector<ContentType>,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_raw(&mut repr, raw);
                    }
                    repr
                }
                unsafe fn __unique_ptr_get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ContentType$get"]
                        fn __unique_ptr_get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::CxxVector<ContentType>;
                    }
                    unsafe { __unique_ptr_get(&repr) }
                }
                unsafe fn __unique_ptr_release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ContentType$release"]
                        fn __unique_ptr_release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::CxxVector<ContentType>;
                    }
                    unsafe { __unique_ptr_release(&mut repr) }
                }
                unsafe fn __unique_ptr_drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$ContentType$drop"]
                        fn __unique_ptr_drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __unique_ptr_drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::UniquePtrTarget for SymbologyIdentifier {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("SymbologyIdentifier")
                }
                fn __null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$SymbologyIdentifier$null"]
                        fn __null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __null(&mut repr);
                    }
                    repr
                }
                fn __new(
                    value: Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$SymbologyIdentifier$uninit"]
                        fn __uninit(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __uninit(&mut repr).cast::<SymbologyIdentifier>().write(value);
                    }
                    repr
                }
                unsafe fn __raw(
                    raw: *mut Self,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$SymbologyIdentifier$raw"]
                        fn __raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __raw(&mut repr, raw.cast());
                    }
                    repr
                }
                unsafe fn __get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$SymbologyIdentifier$get"]
                        fn __get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(&repr).cast() }
                }
                unsafe fn __release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$SymbologyIdentifier$release"]
                        fn __release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __release(&mut repr).cast() }
                }
                unsafe fn __drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$ZXing$SymbologyIdentifier$drop"]
                        fn __drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __drop(&mut repr);
                    }
                }
            }
            unsafe impl ::cxx::private::SharedPtrTarget for SymbologyIdentifier {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("SymbologyIdentifier")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$SymbologyIdentifier$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __new(value: Self, new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$SymbologyIdentifier$uninit"]
                        fn __uninit(
                            new: *mut ::cxx::core::ffi::c_void,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe {
                        __uninit(new).cast::<SymbologyIdentifier>().write(value);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$SymbologyIdentifier$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __get(this: *const ::cxx::core::ffi::c_void) -> *const Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$SymbologyIdentifier$get"]
                        fn __get(
                            this: *const ::cxx::core::ffi::c_void,
                        ) -> *const ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get(this).cast() }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$shared_ptr$ZXing$SymbologyIdentifier$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::WeakPtrTarget for SymbologyIdentifier {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("SymbologyIdentifier")
                }
                unsafe fn __null(new: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$SymbologyIdentifier$null"]
                        fn __null(new: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __null(new);
                    }
                }
                unsafe fn __clone(
                    this: *const ::cxx::core::ffi::c_void,
                    new: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$SymbologyIdentifier$clone"]
                        fn __clone(
                            this: *const ::cxx::core::ffi::c_void,
                            new: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __clone(this, new);
                    }
                }
                unsafe fn __downgrade(
                    shared: *const ::cxx::core::ffi::c_void,
                    weak: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$SymbologyIdentifier$downgrade"]
                        fn __downgrade(
                            shared: *const ::cxx::core::ffi::c_void,
                            weak: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __downgrade(shared, weak);
                    }
                }
                unsafe fn __upgrade(
                    weak: *const ::cxx::core::ffi::c_void,
                    shared: *mut ::cxx::core::ffi::c_void,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$SymbologyIdentifier$upgrade"]
                        fn __upgrade(
                            weak: *const ::cxx::core::ffi::c_void,
                            shared: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __upgrade(weak, shared);
                    }
                }
                unsafe fn __drop(this: *mut ::cxx::core::ffi::c_void) {
                    extern "C" {
                        #[link_name = "cxxbridge1$weak_ptr$ZXing$SymbologyIdentifier$drop"]
                        fn __drop(this: *mut ::cxx::core::ffi::c_void);
                    }
                    unsafe {
                        __drop(this);
                    }
                }
            }
            unsafe impl ::cxx::private::VectorElement for SymbologyIdentifier {
                fn __typename(
                    f: &mut ::cxx::core::fmt::Formatter<'_>,
                ) -> ::cxx::core::fmt::Result {
                    f.write_str("SymbologyIdentifier")
                }
                fn __vector_new() -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$SymbologyIdentifier$new"]
                        fn __vector_new() -> *mut ::cxx::CxxVector<SymbologyIdentifier>;
                    }
                    unsafe { __vector_new() }
                }
                fn __vector_size(v: &::cxx::CxxVector<Self>) -> usize {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$SymbologyIdentifier$size"]
                        fn __vector_size(
                            _: &::cxx::CxxVector<SymbologyIdentifier>,
                        ) -> usize;
                    }
                    unsafe { __vector_size(v) }
                }
                unsafe fn __get_unchecked(
                    v: *mut ::cxx::CxxVector<Self>,
                    pos: usize,
                ) -> *mut Self {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$SymbologyIdentifier$get_unchecked"]
                        fn __get_unchecked(
                            v: *mut ::cxx::CxxVector<SymbologyIdentifier>,
                            pos: usize,
                        ) -> *mut ::cxx::core::ffi::c_void;
                    }
                    unsafe { __get_unchecked(v, pos) as *mut Self }
                }
                unsafe fn __push_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    value: &mut ::cxx::core::mem::ManuallyDrop<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$SymbologyIdentifier$push_back"]
                        fn __push_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<SymbologyIdentifier>,
                            >,
                            value: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __push_back(
                            this,
                            value as *mut ::cxx::core::mem::ManuallyDrop<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                unsafe fn __pop_back(
                    this: ::cxx::core::pin::Pin<&mut ::cxx::CxxVector<Self>>,
                    out: &mut ::cxx::core::mem::MaybeUninit<Self>,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$std$vector$ZXing$SymbologyIdentifier$pop_back"]
                        fn __pop_back(
                            this: ::cxx::core::pin::Pin<
                                &mut ::cxx::CxxVector<SymbologyIdentifier>,
                            >,
                            out: *mut ::cxx::core::ffi::c_void,
                        );
                    }
                    unsafe {
                        __pop_back(
                            this,
                            out as *mut ::cxx::core::mem::MaybeUninit<Self>
                                as *mut ::cxx::core::ffi::c_void,
                        );
                    }
                }
                fn __unique_ptr_null() -> ::cxx::core::mem::MaybeUninit<
                    *mut ::cxx::core::ffi::c_void,
                > {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$SymbologyIdentifier$null"]
                        fn __unique_ptr_null(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_null(&mut repr);
                    }
                    repr
                }
                unsafe fn __unique_ptr_raw(
                    raw: *mut ::cxx::CxxVector<Self>,
                ) -> ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$SymbologyIdentifier$raw"]
                        fn __unique_ptr_raw(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                            raw: *mut ::cxx::CxxVector<SymbologyIdentifier>,
                        );
                    }
                    let mut repr = ::cxx::core::mem::MaybeUninit::uninit();
                    unsafe {
                        __unique_ptr_raw(&mut repr, raw);
                    }
                    repr
                }
                unsafe fn __unique_ptr_get(
                    repr: ::cxx::core::mem::MaybeUninit<*mut ::cxx::core::ffi::c_void>,
                ) -> *const ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$SymbologyIdentifier$get"]
                        fn __unique_ptr_get(
                            this: *const ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *const ::cxx::CxxVector<SymbologyIdentifier>;
                    }
                    unsafe { __unique_ptr_get(&repr) }
                }
                unsafe fn __unique_ptr_release(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) -> *mut ::cxx::CxxVector<Self> {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$SymbologyIdentifier$release"]
                        fn __unique_ptr_release(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        ) -> *mut ::cxx::CxxVector<SymbologyIdentifier>;
                    }
                    unsafe { __unique_ptr_release(&mut repr) }
                }
                unsafe fn __unique_ptr_drop(
                    mut repr: ::cxx::core::mem::MaybeUninit<
                        *mut ::cxx::core::ffi::c_void,
                    >,
                ) {
                    extern "C" {
                        #[link_name = "cxxbridge1$unique_ptr$std$vector$ZXing$SymbologyIdentifier$drop"]
                        fn __unique_ptr_drop(
                            this: *mut ::cxx::core::mem::MaybeUninit<
                                *mut ::cxx::core::ffi::c_void,
                            >,
                        );
                    }
                    unsafe {
                        __unique_ptr_drop(&mut repr);
                    }
                }
            }
            #[doc(hidden)]
            const _: () = {
                const _: fn() = ::cxx::private::verify_extern_type::<
                    ImageView,
                    (
                        ::cxx::Z,
                        ::cxx::X,
                        ::cxx::i,
                        ::cxx::n,
                        ::cxx::g,
                        (),
                        ::cxx::I,
                        ::cxx::m,
                        ::cxx::a,
                        ::cxx::g,
                        ::cxx::e,
                        ::cxx::V,
                        ::cxx::i,
                        ::cxx::e,
                        ::cxx::w,
                    ),
                >;
                const _: fn() = ::cxx::private::verify_extern_type::<
                    Result,
                    (
                        ::cxx::Z,
                        ::cxx::X,
                        ::cxx::i,
                        ::cxx::n,
                        ::cxx::g,
                        (),
                        ::cxx::R,
                        ::cxx::e,
                        ::cxx::s,
                        ::cxx::u,
                        ::cxx::l,
                        ::cxx::t,
                    ),
                >;
                let _: fn() = {
                    trait __AmbiguousIfImpl<A> {
                        fn infer() {}
                    }
                    impl<T> __AmbiguousIfImpl<()> for T
                    where
                        T: ?::cxx::core::marker::Sized,
                    {}
                    #[allow(dead_code)]
                    struct __Invalid;
                    impl<T> __AmbiguousIfImpl<__Invalid> for T
                    where
                        T: ?::cxx::core::marker::Sized + ::cxx::core::marker::Unpin,
                    {}
                    <ZXing_PointT_int_AutocxxConcrete as __AmbiguousIfImpl<_>>::infer
                };
                const _: fn() = ::cxx::private::verify_extern_type::<
                    ImageFormat,
                    (
                        ::cxx::Z,
                        ::cxx::X,
                        ::cxx::i,
                        ::cxx::n,
                        ::cxx::g,
                        (),
                        ::cxx::I,
                        ::cxx::m,
                        ::cxx::a,
                        ::cxx::g,
                        ::cxx::e,
                        ::cxx::F,
                        ::cxx::o,
                        ::cxx::r,
                        ::cxx::m,
                        ::cxx::a,
                        ::cxx::t,
                    ),
                >;
                const _: fn() = ::cxx::private::verify_extern_kind::<
                    ImageFormat,
                    ::cxx::kind::Trivial,
                >;
                const _: fn() = ::cxx::private::verify_extern_type::<
                    BarcodeFormat,
                    (
                        ::cxx::Z,
                        ::cxx::X,
                        ::cxx::i,
                        ::cxx::n,
                        ::cxx::g,
                        (),
                        ::cxx::B,
                        ::cxx::a,
                        ::cxx::r,
                        ::cxx::c,
                        ::cxx::o,
                        ::cxx::d,
                        ::cxx::e,
                        ::cxx::F,
                        ::cxx::o,
                        ::cxx::r,
                        ::cxx::m,
                        ::cxx::a,
                        ::cxx::t,
                    ),
                >;
                const _: fn() = ::cxx::private::verify_extern_kind::<
                    BarcodeFormat,
                    ::cxx::kind::Trivial,
                >;
                const _: fn() = ::cxx::private::verify_extern_type::<
                    Error,
                    (
                        ::cxx::Z,
                        ::cxx::X,
                        ::cxx::i,
                        ::cxx::n,
                        ::cxx::g,
                        (),
                        ::cxx::E,
                        ::cxx::r,
                        ::cxx::r,
                        ::cxx::o,
                        ::cxx::r,
                    ),
                >;
                const _: fn() = ::cxx::private::verify_extern_type::<
                    ByteArray,
                    (
                        ::cxx::Z,
                        ::cxx::X,
                        ::cxx::i,
                        ::cxx::n,
                        ::cxx::g,
                        (),
                        ::cxx::B,
                        ::cxx::y,
                        ::cxx::t,
                        ::cxx::e,
                        ::cxx::A,
                        ::cxx::r,
                        ::cxx::r,
                        ::cxx::a,
                        ::cxx::y,
                    ),
                >;
                const _: fn() = ::cxx::private::verify_extern_type::<
                    TextMode,
                    (
                        ::cxx::Z,
                        ::cxx::X,
                        ::cxx::i,
                        ::cxx::n,
                        ::cxx::g,
                        (),
                        ::cxx::T,
                        ::cxx::e,
                        ::cxx::x,
                        ::cxx::t,
                        ::cxx::M,
                        ::cxx::o,
                        ::cxx::d,
                        ::cxx::e,
                    ),
                >;
                const _: fn() = ::cxx::private::verify_extern_type::<
                    ContentType,
                    (
                        ::cxx::Z,
                        ::cxx::X,
                        ::cxx::i,
                        ::cxx::n,
                        ::cxx::g,
                        (),
                        ::cxx::C,
                        ::cxx::o,
                        ::cxx::n,
                        ::cxx::t,
                        ::cxx::e,
                        ::cxx::n,
                        ::cxx::t,
                        ::cxx::T,
                        ::cxx::y,
                        ::cxx::p,
                        ::cxx::e,
                    ),
                >;
                const _: fn() = ::cxx::private::verify_extern_kind::<
                    ContentType,
                    ::cxx::kind::Trivial,
                >;
                let _: fn() = {
                    trait __AmbiguousIfImpl<A> {
                        fn infer() {}
                    }
                    impl<T> __AmbiguousIfImpl<()> for T
                    where
                        T: ?::cxx::core::marker::Sized,
                    {}
                    #[allow(dead_code)]
                    struct __Invalid;
                    impl<T> __AmbiguousIfImpl<__Invalid> for T
                    where
                        T: ?::cxx::core::marker::Sized + ::cxx::core::marker::Unpin,
                    {}
                    <QuadrilateralI as __AmbiguousIfImpl<_>>::infer
                };
                const _: fn() = ::cxx::private::verify_extern_type::<
                    SymbologyIdentifier,
                    (
                        ::cxx::Z,
                        ::cxx::X,
                        ::cxx::i,
                        ::cxx::n,
                        ::cxx::g,
                        (),
                        ::cxx::S,
                        ::cxx::y,
                        ::cxx::m,
                        ::cxx::b,
                        ::cxx::o,
                        ::cxx::l,
                        ::cxx::o,
                        ::cxx::g,
                        ::cxx::y,
                        ::cxx::I,
                        ::cxx::d,
                        ::cxx::e,
                        ::cxx::n,
                        ::cxx::t,
                        ::cxx::i,
                        ::cxx::f,
                        ::cxx::i,
                        ::cxx::e,
                        ::cxx::r,
                    ),
                >;
                let _: fn() = {
                    trait __AmbiguousIfImpl<A> {
                        fn infer() {}
                    }
                    impl<T> __AmbiguousIfImpl<()> for T
                    where
                        T: ?::cxx::core::marker::Sized,
                    {}
                    #[allow(dead_code)]
                    struct __Invalid;
                    impl<T> __AmbiguousIfImpl<__Invalid> for T
                    where
                        T: ?::cxx::core::marker::Sized + ::cxx::core::marker::Unpin,
                    {}
                    <DecoderResult as __AmbiguousIfImpl<_>>::infer
                };
                const _: fn() = ::cxx::private::verify_extern_type::<
                    ReaderOptions,
                    (
                        ::cxx::Z,
                        ::cxx::X,
                        ::cxx::i,
                        ::cxx::n,
                        ::cxx::g,
                        (),
                        ::cxx::R,
                        ::cxx::e,
                        ::cxx::a,
                        ::cxx::d,
                        ::cxx::e,
                        ::cxx::r,
                        ::cxx::O,
                        ::cxx::p,
                        ::cxx::t,
                        ::cxx::i,
                        ::cxx::o,
                        ::cxx::n,
                        ::cxx::s,
                    ),
                >;
                const _: fn() = ::cxx::private::verify_extern_type::<
                    c_int,
                    (::cxx::c, ::cxx::__, ::cxx::i, ::cxx::n, ::cxx::t),
                >;
                const _: fn() = ::cxx::private::verify_extern_kind::<
                    c_int,
                    ::cxx::kind::Trivial,
                >;
            };
        }
        #[allow(unused_imports)]
        use bindgen::root;
        pub use cxxbridge::autocxx_make_string_0x9a467600c97d87d4 as make_string;
        pub use bindgen::root::ZXing_PointT_int_AutocxxConcrete;
        pub mod ZXing {
            pub use super::bindgen::root::ZXing::ImageView;
            pub use super::bindgen::root::ZXing::PointI;
            pub use super::bindgen::root::ZXing::Result;
            pub use super::bindgen::root::ZXing::Results;
            pub use super::cxxbridge::ToString_autocxx_wrapper_0x9a467600c97d87d4 as ToString;
            pub use super::bindgen::root::ZXing::ReadBarcode;
            pub use super::cxxbridge::BarcodeFormatToString_autocxx_wrapper_0x9a467600c97d87d4 as BarcodeFormatToString;
            pub use super::cxxbridge::ContentTypeToString_autocxx_wrapper_0x9a467600c97d87d4 as ContentTypeToString;
            pub use super::cxxbridge::ErrorToString_autocxx_wrapper_0x9a467600c97d87d4 as ErrorToString;
            pub use super::cxxbridge::ByteArrayAsVec;
            pub use super::bindgen::root::ZXing::ImageFormat;
            pub use super::bindgen::root::ZXing::BarcodeFormat;
            pub use super::bindgen::root::ZXing::Error;
            pub use super::bindgen::root::ZXing::ByteArray;
            pub use crate::bindings::reader_options_ffi::TextMode as TextMode;
            pub use super::bindgen::root::ZXing::ContentType;
            pub use super::bindgen::root::ZXing::Position;
            pub use super::bindgen::root::ZXing::QuadrilateralI;
            pub use super::bindgen::root::ZXing::SymbologyIdentifier;
            pub use super::bindgen::root::ZXing::DecoderResult;
            pub use crate::bindings::reader_options_ffi::ReaderOptions as ReaderOptions;
        }
    }
    pub use ffi::ZXing::*;
}
